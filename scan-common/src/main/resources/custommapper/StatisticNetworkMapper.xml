<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.turn.browser.dao.custommapper.StatisticBusinessMapper">

<select id="getNetworkStatisticsFromNode"  resultType="com.turn.browser.task.bean.NetworkStatistics">
	select sum(total_value) as totalValue,
	    sum(staking_hes + staking_locked) as stakingValue
	 from node 
	 where status = 1
</select>

<select id="getNetworkStatisticsFromAddress"  resultType="java.lang.Integer">
	select count(1) from address
</select>

<select id="getNetworkStatisticsFromProposal"  resultType="java.lang.Integer">
	select count(1) from proposal where status = 1
</select>

    <select id="getProposalQty"  resultType="java.lang.Integer">
        select count(1) from proposal
    </select>

<update id="networkChange" parameterType="com.turn.browser.dao.entity.NetworkStat">
    insert into `network_stat`
    (
        `id`,
        `cur_number`,
        `node_id`,
        `node_name`,
        `tx_qty`,
        `cur_tps`,
        `max_tps`,
        `issue_value`,
        `turn_value`,
        `proposal_qty`,
        `block_reward`,
        `staking_reward`,
        `add_issue_begin`,
        `add_issue_end`,
        `next_settle`,
        `node_opt_seq`,
        `cur_block_hash`,
        `staking_delegation_value`,
        `staking_value`,
        `doing_proposal_qty`,
        `address_qty`,
        `settle_staking_reward`,
        `avg_pack_time`,
        `issue_rates`,
        `erc20_tx_qty`,
        `erc721_tx_qty`,
        `erc1155_tx_qty`,
        `year_num`
    )
    values
    (
        #{id},
        #{curNumber},
        #{nodeId},
        #{nodeName},
        #{txQty},
        #{curTps},
        #{maxTps},
        #{issueValue},
        #{turnValue},
        #{proposalQty},
        #{blockReward},
        #{stakingReward},
        #{addIssueBegin},
        #{addIssueEnd},
        #{nextSettle},
        #{nodeOptSeq},
        #{curBlockHash},
        #{stakingDelegationValue},
        #{stakingValue},
        #{doingProposalQty},
        #{addressQty},
        #{settleStakingReward},
        #{avgPackTime},
        #{issueRates},
        #{erc20TxQty},
        #{erc721TxQty},
        #{erc1155TxQty},
        #{yearNum}
    )
    on duplicate
    key update
        `cur_number` = #{curNumber},
        `node_id` = #{nodeId},
        `node_name` = #{nodeName},
        `tx_qty` = #{txQty},
        `cur_tps` = #{curTps},
        `max_tps` = #{maxTps},
        `issue_value` = #{issueValue},
        `turn_value` = #{turnValue},
        `proposal_qty` = #{proposalQty},
        `block_reward` = #{blockReward},
        `staking_reward` = #{stakingReward},
        `add_issue_begin` = #{addIssueBegin},
        `add_issue_end` = #{addIssueEnd},
        `next_settle` = #{nextSettle},
        `node_opt_seq` = #{nodeOptSeq},
        `cur_block_hash` = #{curBlockHash},
        `staking_delegation_value` = #{stakingDelegationValue},
        `staking_value` = #{stakingValue},
        `doing_proposal_qty`= #{doingProposalQty},
        `address_qty` = #{addressQty},
        `settle_staking_reward` = #{settleStakingReward},
        `avg_pack_time` = #{avgPackTime},
        `issue_rates` = #{issueRates},
        `erc20_tx_qty` = #{erc20TxQty},
        `erc721_tx_qty` = #{erc721TxQty},
        `erc1155_tx_qty` = #{erc1155TxQty},
        `year_num` = #{yearNum}
        ;
</update>
</mapper>