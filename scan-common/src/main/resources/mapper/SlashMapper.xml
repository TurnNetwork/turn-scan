<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.turn.browser.dao.mapper.SlashMapper">
  <resultMap id="BaseResultMap" type="com.turn.browser.dao.entity.Slash">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="tx_hash" jdbcType="VARCHAR" property="txHash" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="setting_epoch" jdbcType="INTEGER" property="settingEpoch" />
    <result column="staking_block_num" jdbcType="BIGINT" property="stakingBlockNum" />
    <result column="slash_rate" jdbcType="DECIMAL" property="slashRate" />
    <result column="slash_report_rate" jdbcType="DECIMAL" property="slashReportRate" />
    <result column="benefit_address" jdbcType="VARCHAR" property="benefitAddress" />
    <result column="code_remain_redeem_amount" jdbcType="DECIMAL" property="codeRemainRedeemAmount" />
    <result column="code_reward_value" jdbcType="DECIMAL" property="codeRewardValue" />
    <result column="code_status" jdbcType="INTEGER" property="codeStatus" />
    <result column="code_staking_reduction_epoch" jdbcType="INTEGER" property="codeStakingReductionEpoch" />
    <result column="code_slash_value" jdbcType="DECIMAL" property="codeSlashValue" />
    <result column="un_stake_freeze_duration" jdbcType="INTEGER" property="unStakeFreezeDuration" />
    <result column="un_stake_end_block" jdbcType="BIGINT" property="unStakeEndBlock" />
    <result column="block_num" jdbcType="BIGINT" property="blockNum" />
    <result column="is_quit" jdbcType="INTEGER" property="isQuit" />
    <result column="is_handle" jdbcType="BIT" property="isHandle" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.turn.browser.dao.entity.Slash">
    <result column="slash_data" jdbcType="LONGVARCHAR" property="slashData" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, node_id, tx_hash, `time`, setting_epoch, staking_block_num, slash_rate, slash_report_rate, 
    benefit_address, code_remain_redeem_amount, code_reward_value, code_status, code_staking_reduction_epoch, 
    code_slash_value, un_stake_freeze_duration, un_stake_end_block, block_num, is_quit, 
    is_handle, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    slash_data
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.turn.browser.dao.entity.SlashExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from slash
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.turn.browser.dao.entity.SlashExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from slash
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from slash
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from slash
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.turn.browser.dao.entity.SlashExample">
    delete from slash
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.turn.browser.dao.entity.Slash">
    insert into slash (id, node_id, tx_hash, 
      `time`, setting_epoch, staking_block_num, 
      slash_rate, slash_report_rate, benefit_address, 
      code_remain_redeem_amount, code_reward_value, 
      code_status, code_staking_reduction_epoch, 
      code_slash_value, un_stake_freeze_duration, 
      un_stake_end_block, block_num, is_quit, 
      is_handle, create_time, update_time, 
      slash_data)
    values (#{id,jdbcType=BIGINT}, #{nodeId,jdbcType=VARCHAR}, #{txHash,jdbcType=VARCHAR}, 
      #{time,jdbcType=TIMESTAMP}, #{settingEpoch,jdbcType=INTEGER}, #{stakingBlockNum,jdbcType=BIGINT}, 
      #{slashRate,jdbcType=DECIMAL}, #{slashReportRate,jdbcType=DECIMAL}, #{benefitAddress,jdbcType=VARCHAR}, 
      #{codeRemainRedeemAmount,jdbcType=DECIMAL}, #{codeRewardValue,jdbcType=DECIMAL}, 
      #{codeStatus,jdbcType=INTEGER}, #{codeStakingReductionEpoch,jdbcType=INTEGER}, 
      #{codeSlashValue,jdbcType=DECIMAL}, #{unStakeFreezeDuration,jdbcType=INTEGER}, 
      #{unStakeEndBlock,jdbcType=BIGINT}, #{blockNum,jdbcType=BIGINT}, #{isQuit,jdbcType=INTEGER}, 
      #{isHandle,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{slashData,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.turn.browser.dao.entity.Slash">
    insert into slash
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="txHash != null">
        tx_hash,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="settingEpoch != null">
        setting_epoch,
      </if>
      <if test="stakingBlockNum != null">
        staking_block_num,
      </if>
      <if test="slashRate != null">
        slash_rate,
      </if>
      <if test="slashReportRate != null">
        slash_report_rate,
      </if>
      <if test="benefitAddress != null">
        benefit_address,
      </if>
      <if test="codeRemainRedeemAmount != null">
        code_remain_redeem_amount,
      </if>
      <if test="codeRewardValue != null">
        code_reward_value,
      </if>
      <if test="codeStatus != null">
        code_status,
      </if>
      <if test="codeStakingReductionEpoch != null">
        code_staking_reduction_epoch,
      </if>
      <if test="codeSlashValue != null">
        code_slash_value,
      </if>
      <if test="unStakeFreezeDuration != null">
        un_stake_freeze_duration,
      </if>
      <if test="unStakeEndBlock != null">
        un_stake_end_block,
      </if>
      <if test="blockNum != null">
        block_num,
      </if>
      <if test="isQuit != null">
        is_quit,
      </if>
      <if test="isHandle != null">
        is_handle,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="slashData != null">
        slash_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="nodeId != null">
        #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="txHash != null">
        #{txHash,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="settingEpoch != null">
        #{settingEpoch,jdbcType=INTEGER},
      </if>
      <if test="stakingBlockNum != null">
        #{stakingBlockNum,jdbcType=BIGINT},
      </if>
      <if test="slashRate != null">
        #{slashRate,jdbcType=DECIMAL},
      </if>
      <if test="slashReportRate != null">
        #{slashReportRate,jdbcType=DECIMAL},
      </if>
      <if test="benefitAddress != null">
        #{benefitAddress,jdbcType=VARCHAR},
      </if>
      <if test="codeRemainRedeemAmount != null">
        #{codeRemainRedeemAmount,jdbcType=DECIMAL},
      </if>
      <if test="codeRewardValue != null">
        #{codeRewardValue,jdbcType=DECIMAL},
      </if>
      <if test="codeStatus != null">
        #{codeStatus,jdbcType=INTEGER},
      </if>
      <if test="codeStakingReductionEpoch != null">
        #{codeStakingReductionEpoch,jdbcType=INTEGER},
      </if>
      <if test="codeSlashValue != null">
        #{codeSlashValue,jdbcType=DECIMAL},
      </if>
      <if test="unStakeFreezeDuration != null">
        #{unStakeFreezeDuration,jdbcType=INTEGER},
      </if>
      <if test="unStakeEndBlock != null">
        #{unStakeEndBlock,jdbcType=BIGINT},
      </if>
      <if test="blockNum != null">
        #{blockNum,jdbcType=BIGINT},
      </if>
      <if test="isQuit != null">
        #{isQuit,jdbcType=INTEGER},
      </if>
      <if test="isHandle != null">
        #{isHandle,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="slashData != null">
        #{slashData,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.turn.browser.dao.entity.SlashExample" resultType="java.lang.Long">
    select count(*) from slash
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update slash
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.nodeId != null">
        node_id = #{record.nodeId,jdbcType=VARCHAR},
      </if>
      <if test="record.txHash != null">
        tx_hash = #{record.txHash,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.settingEpoch != null">
        setting_epoch = #{record.settingEpoch,jdbcType=INTEGER},
      </if>
      <if test="record.stakingBlockNum != null">
        staking_block_num = #{record.stakingBlockNum,jdbcType=BIGINT},
      </if>
      <if test="record.slashRate != null">
        slash_rate = #{record.slashRate,jdbcType=DECIMAL},
      </if>
      <if test="record.slashReportRate != null">
        slash_report_rate = #{record.slashReportRate,jdbcType=DECIMAL},
      </if>
      <if test="record.benefitAddress != null">
        benefit_address = #{record.benefitAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.codeRemainRedeemAmount != null">
        code_remain_redeem_amount = #{record.codeRemainRedeemAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.codeRewardValue != null">
        code_reward_value = #{record.codeRewardValue,jdbcType=DECIMAL},
      </if>
      <if test="record.codeStatus != null">
        code_status = #{record.codeStatus,jdbcType=INTEGER},
      </if>
      <if test="record.codeStakingReductionEpoch != null">
        code_staking_reduction_epoch = #{record.codeStakingReductionEpoch,jdbcType=INTEGER},
      </if>
      <if test="record.codeSlashValue != null">
        code_slash_value = #{record.codeSlashValue,jdbcType=DECIMAL},
      </if>
      <if test="record.unStakeFreezeDuration != null">
        un_stake_freeze_duration = #{record.unStakeFreezeDuration,jdbcType=INTEGER},
      </if>
      <if test="record.unStakeEndBlock != null">
        un_stake_end_block = #{record.unStakeEndBlock,jdbcType=BIGINT},
      </if>
      <if test="record.blockNum != null">
        block_num = #{record.blockNum,jdbcType=BIGINT},
      </if>
      <if test="record.isQuit != null">
        is_quit = #{record.isQuit,jdbcType=INTEGER},
      </if>
      <if test="record.isHandle != null">
        is_handle = #{record.isHandle,jdbcType=BIT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.slashData != null">
        slash_data = #{record.slashData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update slash
    set id = #{record.id,jdbcType=BIGINT},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      tx_hash = #{record.txHash,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      setting_epoch = #{record.settingEpoch,jdbcType=INTEGER},
      staking_block_num = #{record.stakingBlockNum,jdbcType=BIGINT},
      slash_rate = #{record.slashRate,jdbcType=DECIMAL},
      slash_report_rate = #{record.slashReportRate,jdbcType=DECIMAL},
      benefit_address = #{record.benefitAddress,jdbcType=VARCHAR},
      code_remain_redeem_amount = #{record.codeRemainRedeemAmount,jdbcType=DECIMAL},
      code_reward_value = #{record.codeRewardValue,jdbcType=DECIMAL},
      code_status = #{record.codeStatus,jdbcType=INTEGER},
      code_staking_reduction_epoch = #{record.codeStakingReductionEpoch,jdbcType=INTEGER},
      code_slash_value = #{record.codeSlashValue,jdbcType=DECIMAL},
      un_stake_freeze_duration = #{record.unStakeFreezeDuration,jdbcType=INTEGER},
      un_stake_end_block = #{record.unStakeEndBlock,jdbcType=BIGINT},
      block_num = #{record.blockNum,jdbcType=BIGINT},
      is_quit = #{record.isQuit,jdbcType=INTEGER},
      is_handle = #{record.isHandle,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      slash_data = #{record.slashData,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update slash
    set id = #{record.id,jdbcType=BIGINT},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      tx_hash = #{record.txHash,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      setting_epoch = #{record.settingEpoch,jdbcType=INTEGER},
      staking_block_num = #{record.stakingBlockNum,jdbcType=BIGINT},
      slash_rate = #{record.slashRate,jdbcType=DECIMAL},
      slash_report_rate = #{record.slashReportRate,jdbcType=DECIMAL},
      benefit_address = #{record.benefitAddress,jdbcType=VARCHAR},
      code_remain_redeem_amount = #{record.codeRemainRedeemAmount,jdbcType=DECIMAL},
      code_reward_value = #{record.codeRewardValue,jdbcType=DECIMAL},
      code_status = #{record.codeStatus,jdbcType=INTEGER},
      code_staking_reduction_epoch = #{record.codeStakingReductionEpoch,jdbcType=INTEGER},
      code_slash_value = #{record.codeSlashValue,jdbcType=DECIMAL},
      un_stake_freeze_duration = #{record.unStakeFreezeDuration,jdbcType=INTEGER},
      un_stake_end_block = #{record.unStakeEndBlock,jdbcType=BIGINT},
      block_num = #{record.blockNum,jdbcType=BIGINT},
      is_quit = #{record.isQuit,jdbcType=INTEGER},
      is_handle = #{record.isHandle,jdbcType=BIT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.turn.browser.dao.entity.Slash">
    update slash
    <set>
      <if test="nodeId != null">
        node_id = #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="txHash != null">
        tx_hash = #{txHash,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        `time` = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="settingEpoch != null">
        setting_epoch = #{settingEpoch,jdbcType=INTEGER},
      </if>
      <if test="stakingBlockNum != null">
        staking_block_num = #{stakingBlockNum,jdbcType=BIGINT},
      </if>
      <if test="slashRate != null">
        slash_rate = #{slashRate,jdbcType=DECIMAL},
      </if>
      <if test="slashReportRate != null">
        slash_report_rate = #{slashReportRate,jdbcType=DECIMAL},
      </if>
      <if test="benefitAddress != null">
        benefit_address = #{benefitAddress,jdbcType=VARCHAR},
      </if>
      <if test="codeRemainRedeemAmount != null">
        code_remain_redeem_amount = #{codeRemainRedeemAmount,jdbcType=DECIMAL},
      </if>
      <if test="codeRewardValue != null">
        code_reward_value = #{codeRewardValue,jdbcType=DECIMAL},
      </if>
      <if test="codeStatus != null">
        code_status = #{codeStatus,jdbcType=INTEGER},
      </if>
      <if test="codeStakingReductionEpoch != null">
        code_staking_reduction_epoch = #{codeStakingReductionEpoch,jdbcType=INTEGER},
      </if>
      <if test="codeSlashValue != null">
        code_slash_value = #{codeSlashValue,jdbcType=DECIMAL},
      </if>
      <if test="unStakeFreezeDuration != null">
        un_stake_freeze_duration = #{unStakeFreezeDuration,jdbcType=INTEGER},
      </if>
      <if test="unStakeEndBlock != null">
        un_stake_end_block = #{unStakeEndBlock,jdbcType=BIGINT},
      </if>
      <if test="blockNum != null">
        block_num = #{blockNum,jdbcType=BIGINT},
      </if>
      <if test="isQuit != null">
        is_quit = #{isQuit,jdbcType=INTEGER},
      </if>
      <if test="isHandle != null">
        is_handle = #{isHandle,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="slashData != null">
        slash_data = #{slashData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.turn.browser.dao.entity.Slash">
    update slash
    set node_id = #{nodeId,jdbcType=VARCHAR},
      tx_hash = #{txHash,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      setting_epoch = #{settingEpoch,jdbcType=INTEGER},
      staking_block_num = #{stakingBlockNum,jdbcType=BIGINT},
      slash_rate = #{slashRate,jdbcType=DECIMAL},
      slash_report_rate = #{slashReportRate,jdbcType=DECIMAL},
      benefit_address = #{benefitAddress,jdbcType=VARCHAR},
      code_remain_redeem_amount = #{codeRemainRedeemAmount,jdbcType=DECIMAL},
      code_reward_value = #{codeRewardValue,jdbcType=DECIMAL},
      code_status = #{codeStatus,jdbcType=INTEGER},
      code_staking_reduction_epoch = #{codeStakingReductionEpoch,jdbcType=INTEGER},
      code_slash_value = #{codeSlashValue,jdbcType=DECIMAL},
      un_stake_freeze_duration = #{unStakeFreezeDuration,jdbcType=INTEGER},
      un_stake_end_block = #{unStakeEndBlock,jdbcType=BIGINT},
      block_num = #{blockNum,jdbcType=BIGINT},
      is_quit = #{isQuit,jdbcType=INTEGER},
      is_handle = #{isHandle,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      slash_data = #{slashData,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.turn.browser.dao.entity.Slash">
    update slash
    set node_id = #{nodeId,jdbcType=VARCHAR},
      tx_hash = #{txHash,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      setting_epoch = #{settingEpoch,jdbcType=INTEGER},
      staking_block_num = #{stakingBlockNum,jdbcType=BIGINT},
      slash_rate = #{slashRate,jdbcType=DECIMAL},
      slash_report_rate = #{slashReportRate,jdbcType=DECIMAL},
      benefit_address = #{benefitAddress,jdbcType=VARCHAR},
      code_remain_redeem_amount = #{codeRemainRedeemAmount,jdbcType=DECIMAL},
      code_reward_value = #{codeRewardValue,jdbcType=DECIMAL},
      code_status = #{codeStatus,jdbcType=INTEGER},
      code_staking_reduction_epoch = #{codeStakingReductionEpoch,jdbcType=INTEGER},
      code_slash_value = #{codeSlashValue,jdbcType=DECIMAL},
      un_stake_freeze_duration = #{unStakeFreezeDuration,jdbcType=INTEGER},
      un_stake_end_block = #{unStakeEndBlock,jdbcType=BIGINT},
      block_num = #{blockNum,jdbcType=BIGINT},
      is_quit = #{isQuit,jdbcType=INTEGER},
      is_handle = #{isHandle,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into slash
    (id, node_id, tx_hash, `time`, setting_epoch, staking_block_num, slash_rate, slash_report_rate, 
      benefit_address, code_remain_redeem_amount, code_reward_value, code_status, code_staking_reduction_epoch, 
      code_slash_value, un_stake_freeze_duration, un_stake_end_block, block_num, is_quit, 
      is_handle, create_time, update_time, slash_data)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.nodeId,jdbcType=VARCHAR}, #{item.txHash,jdbcType=VARCHAR}, 
        #{item.time,jdbcType=TIMESTAMP}, #{item.settingEpoch,jdbcType=INTEGER}, #{item.stakingBlockNum,jdbcType=BIGINT}, 
        #{item.slashRate,jdbcType=DECIMAL}, #{item.slashReportRate,jdbcType=DECIMAL}, #{item.benefitAddress,jdbcType=VARCHAR}, 
        #{item.codeRemainRedeemAmount,jdbcType=DECIMAL}, #{item.codeRewardValue,jdbcType=DECIMAL}, 
        #{item.codeStatus,jdbcType=INTEGER}, #{item.codeStakingReductionEpoch,jdbcType=INTEGER}, 
        #{item.codeSlashValue,jdbcType=DECIMAL}, #{item.unStakeFreezeDuration,jdbcType=INTEGER}, 
        #{item.unStakeEndBlock,jdbcType=BIGINT}, #{item.blockNum,jdbcType=BIGINT}, #{item.isQuit,jdbcType=INTEGER}, 
        #{item.isHandle,jdbcType=BIT}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, 
        #{item.slashData,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into slash (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'tx_hash'.toString() == column.value">
          #{item.txHash,jdbcType=VARCHAR}
        </if>
        <if test="'time'.toString() == column.value">
          #{item.time,jdbcType=TIMESTAMP}
        </if>
        <if test="'setting_epoch'.toString() == column.value">
          #{item.settingEpoch,jdbcType=INTEGER}
        </if>
        <if test="'staking_block_num'.toString() == column.value">
          #{item.stakingBlockNum,jdbcType=BIGINT}
        </if>
        <if test="'slash_rate'.toString() == column.value">
          #{item.slashRate,jdbcType=DECIMAL}
        </if>
        <if test="'slash_report_rate'.toString() == column.value">
          #{item.slashReportRate,jdbcType=DECIMAL}
        </if>
        <if test="'benefit_address'.toString() == column.value">
          #{item.benefitAddress,jdbcType=VARCHAR}
        </if>
        <if test="'code_remain_redeem_amount'.toString() == column.value">
          #{item.codeRemainRedeemAmount,jdbcType=DECIMAL}
        </if>
        <if test="'code_reward_value'.toString() == column.value">
          #{item.codeRewardValue,jdbcType=DECIMAL}
        </if>
        <if test="'code_status'.toString() == column.value">
          #{item.codeStatus,jdbcType=INTEGER}
        </if>
        <if test="'code_staking_reduction_epoch'.toString() == column.value">
          #{item.codeStakingReductionEpoch,jdbcType=INTEGER}
        </if>
        <if test="'code_slash_value'.toString() == column.value">
          #{item.codeSlashValue,jdbcType=DECIMAL}
        </if>
        <if test="'un_stake_freeze_duration'.toString() == column.value">
          #{item.unStakeFreezeDuration,jdbcType=INTEGER}
        </if>
        <if test="'un_stake_end_block'.toString() == column.value">
          #{item.unStakeEndBlock,jdbcType=BIGINT}
        </if>
        <if test="'block_num'.toString() == column.value">
          #{item.blockNum,jdbcType=BIGINT}
        </if>
        <if test="'is_quit'.toString() == column.value">
          #{item.isQuit,jdbcType=INTEGER}
        </if>
        <if test="'is_handle'.toString() == column.value">
          #{item.isHandle,jdbcType=BIT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'slash_data'.toString() == column.value">
          #{item.slashData,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>

</mapper>