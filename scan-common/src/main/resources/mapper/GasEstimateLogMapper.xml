<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.turn.browser.dao.mapper.GasEstimateLogMapper">
  <resultMap id="BaseResultMap" type="com.turn.browser.dao.entity.GasEstimateLog">
    <id column="seq" jdbcType="BIGINT" property="seq" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.turn.browser.dao.entity.GasEstimateLog">
    <result column="json" jdbcType="LONGVARCHAR" property="json" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    seq
  </sql>
  <sql id="Blob_Column_List">
    json
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.turn.browser.dao.entity.GasEstimateLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from gas_estimate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.turn.browser.dao.entity.GasEstimateLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from gas_estimate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from gas_estimate_log
    where seq = #{seq,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from gas_estimate_log
    where seq = #{seq,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.turn.browser.dao.entity.GasEstimateLogExample">
    delete from gas_estimate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.turn.browser.dao.entity.GasEstimateLog">
    insert into gas_estimate_log (seq, json)
    values (#{seq,jdbcType=BIGINT}, #{json,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.turn.browser.dao.entity.GasEstimateLog">
    insert into gas_estimate_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="seq != null">
        seq,
      </if>
      <if test="json != null">
        json,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="seq != null">
        #{seq,jdbcType=BIGINT},
      </if>
      <if test="json != null">
        #{json,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.turn.browser.dao.entity.GasEstimateLogExample" resultType="java.lang.Long">
    select count(*) from gas_estimate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update gas_estimate_log
    <set>
      <if test="record.seq != null">
        seq = #{record.seq,jdbcType=BIGINT},
      </if>
      <if test="record.json != null">
        json = #{record.json,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update gas_estimate_log
    set seq = #{record.seq,jdbcType=BIGINT},
      json = #{record.json,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update gas_estimate_log
    set seq = #{record.seq,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.turn.browser.dao.entity.GasEstimateLog">
    update gas_estimate_log
    <set>
      <if test="json != null">
        json = #{json,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where seq = #{seq,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.turn.browser.dao.entity.GasEstimateLog">
    update gas_estimate_log
    set json = #{json,jdbcType=LONGVARCHAR}
    where seq = #{seq,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into gas_estimate_log
    (seq, json)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.seq,jdbcType=BIGINT}, #{item.json,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into gas_estimate_log (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'seq'.toString() == column.value">
          #{item.seq,jdbcType=BIGINT}
        </if>
        <if test="'json'.toString() == column.value">
          #{item.json,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>