<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.turn.browser.dao.mapper.AddressMapper">
  <resultMap id="BaseResultMap" type="com.turn.browser.dao.entity.Address">
    <id column="address" jdbcType="VARCHAR" property="address" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="balance" jdbcType="DECIMAL" property="balance" />
    <result column="restricting_balance" jdbcType="DECIMAL" property="restrictingBalance" />
    <result column="staking_value" jdbcType="DECIMAL" property="stakingValue" />
    <result column="delegate_value" jdbcType="DECIMAL" property="delegateValue" />
    <result column="redeemed_value" jdbcType="DECIMAL" property="redeemedValue" />
    <result column="tx_qty" jdbcType="INTEGER" property="txQty" />
    <result column="transfer_qty" jdbcType="INTEGER" property="transferQty" />
    <result column="delegate_qty" jdbcType="INTEGER" property="delegateQty" />
    <result column="staking_qty" jdbcType="INTEGER" property="stakingQty" />
    <result column="proposal_qty" jdbcType="INTEGER" property="proposalQty" />
    <result column="candidate_count" jdbcType="INTEGER" property="candidateCount" />
    <result column="delegate_hes" jdbcType="DECIMAL" property="delegateHes" />
    <result column="delegate_locked" jdbcType="DECIMAL" property="delegateLocked" />
    <result column="delegate_released" jdbcType="DECIMAL" property="delegateReleased" />
    <result column="contract_name" jdbcType="VARCHAR" property="contractName" />
    <result column="contract_create" jdbcType="VARCHAR" property="contractCreate" />
    <result column="contract_createHash" jdbcType="VARCHAR" property="contractCreatehash" />
    <result column="contract_destroy_hash" jdbcType="VARCHAR" property="contractDestroyHash" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="have_reward" jdbcType="DECIMAL" property="haveReward" />
    <result column="erc1155_tx_qty" jdbcType="INTEGER" property="erc1155TxQty"/>
    <result column="erc721_tx_qty" jdbcType="INTEGER" property="erc721TxQty" />
    <result column="erc20_tx_qty" jdbcType="INTEGER" property="erc20TxQty" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.turn.browser.dao.entity.Address">
    <result column="contract_bin" jdbcType="LONGVARCHAR" property="contractBin" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    address, `type`, balance, restricting_balance, staking_value, delegate_value, redeemed_value, 
    tx_qty, transfer_qty, delegate_qty, staking_qty, proposal_qty, candidate_count, delegate_hes, 
    delegate_locked, delegate_released, contract_name, contract_create, contract_createHash, 
    contract_destroy_hash, create_time, update_time, have_reward, erc1155_tx_qty, erc721_tx_qty, erc20_tx_qty
  </sql>
  <sql id="Blob_Column_List">
    contract_bin
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.turn.browser.dao.entity.AddressExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.turn.browser.dao.entity.AddressExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from address
    where address = #{address,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from address
    where address = #{address,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.turn.browser.dao.entity.AddressExample">
    delete from address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.turn.browser.dao.entity.Address">
    insert into address (address, `type`, balance, 
      restricting_balance, staking_value, delegate_value, 
      redeemed_value, tx_qty, transfer_qty, 
      delegate_qty, staking_qty, proposal_qty, 
      candidate_count, delegate_hes, delegate_locked, 
      delegate_released, contract_name, contract_create, 
      contract_createHash, contract_destroy_hash, 
      create_time, update_time, have_reward,
     erc1155_tx_qty, erc721_tx_qty, erc20_tx_qty, contract_bin
      )
    values (#{address,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{balance,jdbcType=DECIMAL}, 
      #{restrictingBalance,jdbcType=DECIMAL}, #{stakingValue,jdbcType=DECIMAL}, #{delegateValue,jdbcType=DECIMAL}, 
      #{redeemedValue,jdbcType=DECIMAL}, #{txQty,jdbcType=INTEGER}, #{transferQty,jdbcType=INTEGER}, 
      #{delegateQty,jdbcType=INTEGER}, #{stakingQty,jdbcType=INTEGER}, #{proposalQty,jdbcType=INTEGER}, 
      #{candidateCount,jdbcType=INTEGER}, #{delegateHes,jdbcType=DECIMAL}, #{delegateLocked,jdbcType=DECIMAL}, 
      #{delegateReleased,jdbcType=DECIMAL}, #{contractName,jdbcType=VARCHAR}, #{contractCreate,jdbcType=VARCHAR}, 
      #{contractCreatehash,jdbcType=VARCHAR}, #{contractDestroyHash,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{haveReward,jdbcType=DECIMAL},
      #{erc1155TxQty,jdbcType=INTEGER}, #{erc721TxQty,jdbcType=INTEGER}, #{erc20TxQty,jdbcType=INTEGER}, #{contractBin,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.turn.browser.dao.entity.Address">
    insert into address
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="address != null">
        address,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="restrictingBalance != null">
        restricting_balance,
      </if>
      <if test="stakingValue != null">
        staking_value,
      </if>
      <if test="delegateValue != null">
        delegate_value,
      </if>
      <if test="redeemedValue != null">
        redeemed_value,
      </if>
      <if test="txQty != null">
        tx_qty,
      </if>
      <if test="transferQty != null">
        transfer_qty,
      </if>
      <if test="delegateQty != null">
        delegate_qty,
      </if>
      <if test="stakingQty != null">
        staking_qty,
      </if>
      <if test="proposalQty != null">
        proposal_qty,
      </if>
      <if test="candidateCount != null">
        candidate_count,
      </if>
      <if test="delegateHes != null">
        delegate_hes,
      </if>
      <if test="delegateLocked != null">
        delegate_locked,
      </if>
      <if test="delegateReleased != null">
        delegate_released,
      </if>
      <if test="contractName != null">
        contract_name,
      </if>
      <if test="contractCreate != null">
        contract_create,
      </if>
      <if test="contractCreatehash != null">
        contract_createHash,
      </if>
      <if test="contractDestroyHash != null">
        contract_destroy_hash,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="haveReward != null">
        have_reward,
      </if>
      <if test="erc1155TxQty != null">
        erc1155_tx_qty,
      </if>
      <if test="erc721TxQty != null">
        erc721_tx_qty,
      </if>
      <if test="erc20TxQty != null">
        erc20_tx_qty,
      </if>
      <if test="contractBin != null">
        contract_bin,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="restrictingBalance != null">
        #{restrictingBalance,jdbcType=DECIMAL},
      </if>
      <if test="stakingValue != null">
        #{stakingValue,jdbcType=DECIMAL},
      </if>
      <if test="delegateValue != null">
        #{delegateValue,jdbcType=DECIMAL},
      </if>
      <if test="redeemedValue != null">
        #{redeemedValue,jdbcType=DECIMAL},
      </if>
      <if test="txQty != null">
        #{txQty,jdbcType=INTEGER},
      </if>
      <if test="transferQty != null">
        #{transferQty,jdbcType=INTEGER},
      </if>
      <if test="delegateQty != null">
        #{delegateQty,jdbcType=INTEGER},
      </if>
      <if test="stakingQty != null">
        #{stakingQty,jdbcType=INTEGER},
      </if>
      <if test="proposalQty != null">
        #{proposalQty,jdbcType=INTEGER},
      </if>
      <if test="candidateCount != null">
        #{candidateCount,jdbcType=INTEGER},
      </if>
      <if test="delegateHes != null">
        #{delegateHes,jdbcType=DECIMAL},
      </if>
      <if test="delegateLocked != null">
        #{delegateLocked,jdbcType=DECIMAL},
      </if>
      <if test="delegateReleased != null">
        #{delegateReleased,jdbcType=DECIMAL},
      </if>
      <if test="contractName != null">
        #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="contractCreate != null">
        #{contractCreate,jdbcType=VARCHAR},
      </if>
      <if test="contractCreatehash != null">
        #{contractCreatehash,jdbcType=VARCHAR},
      </if>
      <if test="contractDestroyHash != null">
        #{contractDestroyHash,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="haveReward != null">
        #{haveReward,jdbcType=DECIMAL},
      </if>
      <if test="erc1155TxQty != null">
        #{erc1155TxQty,jdbcType=INTEGER},
      </if>
      <if test="erc721TxQty != null">
        #{erc721TxQty,jdbcType=INTEGER},
      </if>
      <if test="erc20TxQty != null">
        #{erc20TxQty,jdbcType=INTEGER},
      </if>
      <if test="contractBin != null">
        #{contractBin,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.turn.browser.dao.entity.AddressExample" resultType="java.lang.Long">
    select count(*) from address
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update address
    <set>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.balance != null">
        balance = #{record.balance,jdbcType=DECIMAL},
      </if>
      <if test="record.restrictingBalance != null">
        restricting_balance = #{record.restrictingBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.stakingValue != null">
        staking_value = #{record.stakingValue,jdbcType=DECIMAL},
      </if>
      <if test="record.delegateValue != null">
        delegate_value = #{record.delegateValue,jdbcType=DECIMAL},
      </if>
      <if test="record.redeemedValue != null">
        redeemed_value = #{record.redeemedValue,jdbcType=DECIMAL},
      </if>
      <if test="record.txQty != null">
        tx_qty = #{record.txQty,jdbcType=INTEGER},
      </if>
      <if test="record.transferQty != null">
        transfer_qty = #{record.transferQty,jdbcType=INTEGER},
      </if>
      <if test="record.delegateQty != null">
        delegate_qty = #{record.delegateQty,jdbcType=INTEGER},
      </if>
      <if test="record.stakingQty != null">
        staking_qty = #{record.stakingQty,jdbcType=INTEGER},
      </if>
      <if test="record.proposalQty != null">
        proposal_qty = #{record.proposalQty,jdbcType=INTEGER},
      </if>
      <if test="record.candidateCount != null">
        candidate_count = #{record.candidateCount,jdbcType=INTEGER},
      </if>
      <if test="record.delegateHes != null">
        delegate_hes = #{record.delegateHes,jdbcType=DECIMAL},
      </if>
      <if test="record.delegateLocked != null">
        delegate_locked = #{record.delegateLocked,jdbcType=DECIMAL},
      </if>
      <if test="record.delegateReleased != null">
        delegate_released = #{record.delegateReleased,jdbcType=DECIMAL},
      </if>
      <if test="record.contractName != null">
        contract_name = #{record.contractName,jdbcType=VARCHAR},
      </if>
      <if test="record.contractCreate != null">
        contract_create = #{record.contractCreate,jdbcType=VARCHAR},
      </if>
      <if test="record.contractCreatehash != null">
        contract_createHash = #{record.contractCreatehash,jdbcType=VARCHAR},
      </if>
      <if test="record.contractDestroyHash != null">
        contract_destroy_hash = #{record.contractDestroyHash,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.haveReward != null">
        have_reward = #{record.haveReward,jdbcType=DECIMAL},
      </if>
      <if test="record.erc1155TxQty != null">
        erc1155_tx_qty = #{record.erc1155TxQty,jdbcType=INTEGER},
      </if>
      <if test="record.erc721TxQty != null">
        erc721_tx_qty = #{record.erc721TxQty,jdbcType=INTEGER},
      </if>
      <if test="record.erc20TxQty != null">
        erc20_tx_qty = #{record.erc20TxQty,jdbcType=INTEGER},
      </if>
      <if test="record.contractBin != null">
        contract_bin = #{record.contractBin,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update address
    set address = #{record.address,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=INTEGER},
      balance = #{record.balance,jdbcType=DECIMAL},
      restricting_balance = #{record.restrictingBalance,jdbcType=DECIMAL},
      staking_value = #{record.stakingValue,jdbcType=DECIMAL},
      delegate_value = #{record.delegateValue,jdbcType=DECIMAL},
      redeemed_value = #{record.redeemedValue,jdbcType=DECIMAL},
      tx_qty = #{record.txQty,jdbcType=INTEGER},
      transfer_qty = #{record.transferQty,jdbcType=INTEGER},
      delegate_qty = #{record.delegateQty,jdbcType=INTEGER},
      staking_qty = #{record.stakingQty,jdbcType=INTEGER},
      proposal_qty = #{record.proposalQty,jdbcType=INTEGER},
      candidate_count = #{record.candidateCount,jdbcType=INTEGER},
      delegate_hes = #{record.delegateHes,jdbcType=DECIMAL},
      delegate_locked = #{record.delegateLocked,jdbcType=DECIMAL},
      delegate_released = #{record.delegateReleased,jdbcType=DECIMAL},
      contract_name = #{record.contractName,jdbcType=VARCHAR},
      contract_create = #{record.contractCreate,jdbcType=VARCHAR},
      contract_createHash = #{record.contractCreatehash,jdbcType=VARCHAR},
      contract_destroy_hash = #{record.contractDestroyHash,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      have_reward = #{record.haveReward,jdbcType=DECIMAL},
      erc1155_tx_qty = #{record.erc1155TxQty,jdbcType=INTEGER},
      erc721_tx_qty = #{record.erc721TxQty,jdbcType=INTEGER},
      erc20_tx_qty = #{record.erc20TxQty,jdbcType=INTEGER},
      contract_bin = #{record.contractBin,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update address
    set address = #{record.address,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=INTEGER},
      balance = #{record.balance,jdbcType=DECIMAL},
      restricting_balance = #{record.restrictingBalance,jdbcType=DECIMAL},
      staking_value = #{record.stakingValue,jdbcType=DECIMAL},
      delegate_value = #{record.delegateValue,jdbcType=DECIMAL},
      redeemed_value = #{record.redeemedValue,jdbcType=DECIMAL},
      tx_qty = #{record.txQty,jdbcType=INTEGER},
      transfer_qty = #{record.transferQty,jdbcType=INTEGER},
      delegate_qty = #{record.delegateQty,jdbcType=INTEGER},
      staking_qty = #{record.stakingQty,jdbcType=INTEGER},
      proposal_qty = #{record.proposalQty,jdbcType=INTEGER},
      candidate_count = #{record.candidateCount,jdbcType=INTEGER},
      delegate_hes = #{record.delegateHes,jdbcType=DECIMAL},
      delegate_locked = #{record.delegateLocked,jdbcType=DECIMAL},
      delegate_released = #{record.delegateReleased,jdbcType=DECIMAL},
      contract_name = #{record.contractName,jdbcType=VARCHAR},
      contract_create = #{record.contractCreate,jdbcType=VARCHAR},
      contract_createHash = #{record.contractCreatehash,jdbcType=VARCHAR},
      contract_destroy_hash = #{record.contractDestroyHash,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      have_reward = #{record.haveReward,jdbcType=DECIMAL},
      erc1155_tx_qty = #{record.erc1155TxQty,jdbcType=INTEGER},
      erc721_tx_qty = #{record.erc721TxQty,jdbcType=INTEGER},
      erc20_tx_qty = #{record.erc20TxQty,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.turn.browser.dao.entity.Address">
    update address
    <set>
      <if test="type != null">
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="restrictingBalance != null">
        restricting_balance = #{restrictingBalance,jdbcType=DECIMAL},
      </if>
      <if test="stakingValue != null">
        staking_value = #{stakingValue,jdbcType=DECIMAL},
      </if>
      <if test="delegateValue != null">
        delegate_value = #{delegateValue,jdbcType=DECIMAL},
      </if>
      <if test="redeemedValue != null">
        redeemed_value = #{redeemedValue,jdbcType=DECIMAL},
      </if>
      <if test="txQty != null">
        tx_qty = #{txQty,jdbcType=INTEGER},
      </if>
      <if test="transferQty != null">
        transfer_qty = #{transferQty,jdbcType=INTEGER},
      </if>
      <if test="delegateQty != null">
        delegate_qty = #{delegateQty,jdbcType=INTEGER},
      </if>
      <if test="stakingQty != null">
        staking_qty = #{stakingQty,jdbcType=INTEGER},
      </if>
      <if test="proposalQty != null">
        proposal_qty = #{proposalQty,jdbcType=INTEGER},
      </if>
      <if test="candidateCount != null">
        candidate_count = #{candidateCount,jdbcType=INTEGER},
      </if>
      <if test="delegateHes != null">
        delegate_hes = #{delegateHes,jdbcType=DECIMAL},
      </if>
      <if test="delegateLocked != null">
        delegate_locked = #{delegateLocked,jdbcType=DECIMAL},
      </if>
      <if test="delegateReleased != null">
        delegate_released = #{delegateReleased,jdbcType=DECIMAL},
      </if>
      <if test="contractName != null">
        contract_name = #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="contractCreate != null">
        contract_create = #{contractCreate,jdbcType=VARCHAR},
      </if>
      <if test="contractCreatehash != null">
        contract_createHash = #{contractCreatehash,jdbcType=VARCHAR},
      </if>
      <if test="contractDestroyHash != null">
        contract_destroy_hash = #{contractDestroyHash,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="haveReward != null">
        have_reward = #{haveReward,jdbcType=DECIMAL},
      </if>
      <if test="erc1155TxQty != null">
        erc1155_tx_qty = #{erc1155TxQty,jdbcType=INTEGER},
      </if>
      <if test="erc721TxQty != null">
        erc721_tx_qty = #{erc721TxQty,jdbcType=INTEGER},
      </if>
      <if test="erc20TxQty != null">
        erc20_tx_qty = #{erc20TxQty,jdbcType=INTEGER},
      </if>
      <if test="contractBin != null">
        contract_bin = #{contractBin,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where address = #{address,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.turn.browser.dao.entity.Address">
    update address
    set `type` = #{type,jdbcType=INTEGER},
      balance = #{balance,jdbcType=DECIMAL},
      restricting_balance = #{restrictingBalance,jdbcType=DECIMAL},
      staking_value = #{stakingValue,jdbcType=DECIMAL},
      delegate_value = #{delegateValue,jdbcType=DECIMAL},
      redeemed_value = #{redeemedValue,jdbcType=DECIMAL},
      tx_qty = #{txQty,jdbcType=INTEGER},
      transfer_qty = #{transferQty,jdbcType=INTEGER},
      delegate_qty = #{delegateQty,jdbcType=INTEGER},
      staking_qty = #{stakingQty,jdbcType=INTEGER},
      proposal_qty = #{proposalQty,jdbcType=INTEGER},
      candidate_count = #{candidateCount,jdbcType=INTEGER},
      delegate_hes = #{delegateHes,jdbcType=DECIMAL},
      delegate_locked = #{delegateLocked,jdbcType=DECIMAL},
      delegate_released = #{delegateReleased,jdbcType=DECIMAL},
      contract_name = #{contractName,jdbcType=VARCHAR},
      contract_create = #{contractCreate,jdbcType=VARCHAR},
      contract_createHash = #{contractCreatehash,jdbcType=VARCHAR},
      contract_destroy_hash = #{contractDestroyHash,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      have_reward = #{haveReward,jdbcType=DECIMAL},
      erc1155_tx_qty = #{erc1155TxQty,jdbcType=INTEGER},
      erc721_tx_qty = #{erc721TxQty,jdbcType=INTEGER},
      erc20_tx_qty = #{erc20TxQty,jdbcType=INTEGER},
      contract_bin = #{contractBin,jdbcType=LONGVARCHAR}
    where address = #{address,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.turn.browser.dao.entity.Address">
    update address
    set `type` = #{type,jdbcType=INTEGER},
      balance = #{balance,jdbcType=DECIMAL},
      restricting_balance = #{restrictingBalance,jdbcType=DECIMAL},
      staking_value = #{stakingValue,jdbcType=DECIMAL},
      delegate_value = #{delegateValue,jdbcType=DECIMAL},
      redeemed_value = #{redeemedValue,jdbcType=DECIMAL},
      tx_qty = #{txQty,jdbcType=INTEGER},
      transfer_qty = #{transferQty,jdbcType=INTEGER},
      delegate_qty = #{delegateQty,jdbcType=INTEGER},
      staking_qty = #{stakingQty,jdbcType=INTEGER},
      proposal_qty = #{proposalQty,jdbcType=INTEGER},
      candidate_count = #{candidateCount,jdbcType=INTEGER},
      delegate_hes = #{delegateHes,jdbcType=DECIMAL},
      delegate_locked = #{delegateLocked,jdbcType=DECIMAL},
      delegate_released = #{delegateReleased,jdbcType=DECIMAL},
      contract_name = #{contractName,jdbcType=VARCHAR},
      contract_create = #{contractCreate,jdbcType=VARCHAR},
      contract_createHash = #{contractCreatehash,jdbcType=VARCHAR},
      contract_destroy_hash = #{contractDestroyHash,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      have_reward = #{haveReward,jdbcType=DECIMAL},
      erc721_tx_qty = #{erc721TxQty,jdbcType=INTEGER},
      erc20_tx_qty = #{erc20TxQty,jdbcType=INTEGER}
    where address = #{address,jdbcType=VARCHAR}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into address
    (address, `type`, balance, restricting_balance, staking_value, delegate_value, redeemed_value, 
      tx_qty, transfer_qty, delegate_qty, staking_qty, proposal_qty, candidate_count, 
      delegate_hes, delegate_locked, delegate_released, contract_name, contract_create, 
      contract_createHash, contract_destroy_hash, create_time, update_time, have_reward,
      erc1155_tx_qty, erc721_tx_qty, erc20_tx_qty, contract_bin)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.address,jdbcType=VARCHAR}, #{item.type,jdbcType=INTEGER}, #{item.balance,jdbcType=DECIMAL}, 
        #{item.restrictingBalance,jdbcType=DECIMAL}, #{item.stakingValue,jdbcType=DECIMAL}, 
        #{item.delegateValue,jdbcType=DECIMAL}, #{item.redeemedValue,jdbcType=DECIMAL}, 
        #{item.txQty,jdbcType=INTEGER}, #{item.transferQty,jdbcType=INTEGER}, #{item.delegateQty,jdbcType=INTEGER}, 
        #{item.stakingQty,jdbcType=INTEGER}, #{item.proposalQty,jdbcType=INTEGER}, #{item.candidateCount,jdbcType=INTEGER}, 
        #{item.delegateHes,jdbcType=DECIMAL}, #{item.delegateLocked,jdbcType=DECIMAL}, 
        #{item.delegateReleased,jdbcType=DECIMAL}, #{item.contractName,jdbcType=VARCHAR}, 
        #{item.contractCreate,jdbcType=VARCHAR}, #{item.contractCreatehash,jdbcType=VARCHAR}, 
        #{item.contractDestroyHash,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.haveReward,jdbcType=DECIMAL}, #{item.erc1155TxQty,jdbcType=INTEGER},
        #{item.erc721TxQty,jdbcType=INTEGER}, #{item.erc20TxQty,jdbcType=INTEGER}, #{item.contractBin,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into address (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'address'.toString() == column.value">
          #{item.address,jdbcType=VARCHAR}
        </if>
        <if test="'type'.toString() == column.value">
          #{item.type,jdbcType=INTEGER}
        </if>
        <if test="'balance'.toString() == column.value">
          #{item.balance,jdbcType=DECIMAL}
        </if>
        <if test="'restricting_balance'.toString() == column.value">
          #{item.restrictingBalance,jdbcType=DECIMAL}
        </if>
        <if test="'staking_value'.toString() == column.value">
          #{item.stakingValue,jdbcType=DECIMAL}
        </if>
        <if test="'delegate_value'.toString() == column.value">
          #{item.delegateValue,jdbcType=DECIMAL}
        </if>
        <if test="'redeemed_value'.toString() == column.value">
          #{item.redeemedValue,jdbcType=DECIMAL}
        </if>
        <if test="'tx_qty'.toString() == column.value">
          #{item.txQty,jdbcType=INTEGER}
        </if>
        <if test="'transfer_qty'.toString() == column.value">
          #{item.transferQty,jdbcType=INTEGER}
        </if>
        <if test="'delegate_qty'.toString() == column.value">
          #{item.delegateQty,jdbcType=INTEGER}
        </if>
        <if test="'staking_qty'.toString() == column.value">
          #{item.stakingQty,jdbcType=INTEGER}
        </if>
        <if test="'proposal_qty'.toString() == column.value">
          #{item.proposalQty,jdbcType=INTEGER}
        </if>
        <if test="'candidate_count'.toString() == column.value">
          #{item.candidateCount,jdbcType=INTEGER}
        </if>
        <if test="'delegate_hes'.toString() == column.value">
          #{item.delegateHes,jdbcType=DECIMAL}
        </if>
        <if test="'delegate_locked'.toString() == column.value">
          #{item.delegateLocked,jdbcType=DECIMAL}
        </if>
        <if test="'delegate_released'.toString() == column.value">
          #{item.delegateReleased,jdbcType=DECIMAL}
        </if>
        <if test="'contract_name'.toString() == column.value">
          #{item.contractName,jdbcType=VARCHAR}
        </if>
        <if test="'contract_create'.toString() == column.value">
          #{item.contractCreate,jdbcType=VARCHAR}
        </if>
        <if test="'contract_createHash'.toString() == column.value">
          #{item.contractCreatehash,jdbcType=VARCHAR}
        </if>
        <if test="'contract_destroy_hash'.toString() == column.value">
          #{item.contractDestroyHash,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'have_reward'.toString() == column.value">
          #{item.haveReward,jdbcType=DECIMAL}
        </if>
        <if test="'erc1155_tx_qty'.toString() == column.value">
          #{item.erc1155TxQty,jdbcType=INTEGER}
        </if>
        <if test="'erc721_tx_qty'.toString() == column.value">
          #{item.erc721TxQty,jdbcType=INTEGER}
        </if>
        <if test="'erc20_tx_qty'.toString() == column.value">
          #{item.erc20TxQty,jdbcType=INTEGER}
        </if>
        <if test="'contract_bin'.toString() == column.value">
          #{item.contractBin,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>

</mapper>