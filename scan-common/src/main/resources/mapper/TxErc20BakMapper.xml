<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.turn.browser.dao.mapper.TxErc20BakMapper">
  <resultMap id="BaseResultMap" type="com.turn.browser.dao.entity.TxErc20Bak">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="seq" jdbcType="BIGINT" property="seq" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="symbol" jdbcType="VARCHAR" property="symbol" />
    <result column="decimal" jdbcType="INTEGER" property="decimal" />
    <result column="contract" jdbcType="VARCHAR" property="contract" />
    <result column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="from" jdbcType="VARCHAR" property="from" />
    <result column="from_type" jdbcType="INTEGER" property="fromType" />
    <result column="to" jdbcType="VARCHAR" property="to" />
    <result column="to_type" jdbcType="INTEGER" property="toType" />
    <result column="value" jdbcType="VARCHAR" property="value" />
    <result column="bn" jdbcType="BIGINT" property="bn" />
    <result column="b_time" jdbcType="TIMESTAMP" property="bTime" />
    <result column="tx_fee" jdbcType="VARCHAR" property="txFee" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.turn.browser.dao.entity.TxErc20Bak">
    <result column="remark" jdbcType="LONGVARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, seq, `name`, symbol, `decimal`, contract, hash, `from`, from_type, `to`, to_type, 
    `value`, bn, b_time, tx_fee
  </sql>
  <sql id="Blob_Column_List">
    remark
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.turn.browser.dao.entity.TxErc20BakExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tx_erc_20_bak
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.turn.browser.dao.entity.TxErc20BakExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tx_erc_20_bak
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tx_erc_20_bak
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tx_erc_20_bak
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.turn.browser.dao.entity.TxErc20BakExample">
    delete from tx_erc_20_bak
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.turn.browser.dao.entity.TxErc20Bak">
    insert into tx_erc_20_bak (id, seq, `name`, 
      symbol, `decimal`, contract, 
      hash, `from`, from_type, 
      `to`, to_type, `value`, 
      bn, b_time, tx_fee, 
      remark)
    values (#{id,jdbcType=BIGINT}, #{seq,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, 
      #{symbol,jdbcType=VARCHAR}, #{decimal,jdbcType=INTEGER}, #{contract,jdbcType=VARCHAR}, 
      #{hash,jdbcType=VARCHAR}, #{from,jdbcType=VARCHAR}, #{fromType,jdbcType=INTEGER}, 
      #{to,jdbcType=VARCHAR}, #{toType,jdbcType=INTEGER}, #{value,jdbcType=VARCHAR}, 
      #{bn,jdbcType=BIGINT}, #{bTime,jdbcType=TIMESTAMP}, #{txFee,jdbcType=VARCHAR}, 
      #{remark,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.turn.browser.dao.entity.TxErc20Bak">
    insert into tx_erc_20_bak
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="seq != null">
        seq,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="symbol != null">
        symbol,
      </if>
      <if test="decimal != null">
        `decimal`,
      </if>
      <if test="contract != null">
        contract,
      </if>
      <if test="hash != null">
        hash,
      </if>
      <if test="from != null">
        `from`,
      </if>
      <if test="fromType != null">
        from_type,
      </if>
      <if test="to != null">
        `to`,
      </if>
      <if test="toType != null">
        to_type,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="bn != null">
        bn,
      </if>
      <if test="bTime != null">
        b_time,
      </if>
      <if test="txFee != null">
        tx_fee,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="seq != null">
        #{seq,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="symbol != null">
        #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="decimal != null">
        #{decimal,jdbcType=INTEGER},
      </if>
      <if test="contract != null">
        #{contract,jdbcType=VARCHAR},
      </if>
      <if test="hash != null">
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="from != null">
        #{from,jdbcType=VARCHAR},
      </if>
      <if test="fromType != null">
        #{fromType,jdbcType=INTEGER},
      </if>
      <if test="to != null">
        #{to,jdbcType=VARCHAR},
      </if>
      <if test="toType != null">
        #{toType,jdbcType=INTEGER},
      </if>
      <if test="value != null">
        #{value,jdbcType=VARCHAR},
      </if>
      <if test="bn != null">
        #{bn,jdbcType=BIGINT},
      </if>
      <if test="bTime != null">
        #{bTime,jdbcType=TIMESTAMP},
      </if>
      <if test="txFee != null">
        #{txFee,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.turn.browser.dao.entity.TxErc20BakExample" resultType="java.lang.Long">
    select count(*) from tx_erc_20_bak
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tx_erc_20_bak
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.seq != null">
        seq = #{record.seq,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.symbol != null">
        symbol = #{record.symbol,jdbcType=VARCHAR},
      </if>
      <if test="record.decimal != null">
        `decimal` = #{record.decimal,jdbcType=INTEGER},
      </if>
      <if test="record.contract != null">
        contract = #{record.contract,jdbcType=VARCHAR},
      </if>
      <if test="record.hash != null">
        hash = #{record.hash,jdbcType=VARCHAR},
      </if>
      <if test="record.from != null">
        `from` = #{record.from,jdbcType=VARCHAR},
      </if>
      <if test="record.fromType != null">
        from_type = #{record.fromType,jdbcType=INTEGER},
      </if>
      <if test="record.to != null">
        `to` = #{record.to,jdbcType=VARCHAR},
      </if>
      <if test="record.toType != null">
        to_type = #{record.toType,jdbcType=INTEGER},
      </if>
      <if test="record.value != null">
        `value` = #{record.value,jdbcType=VARCHAR},
      </if>
      <if test="record.bn != null">
        bn = #{record.bn,jdbcType=BIGINT},
      </if>
      <if test="record.bTime != null">
        b_time = #{record.bTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.txFee != null">
        tx_fee = #{record.txFee,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update tx_erc_20_bak
    set id = #{record.id,jdbcType=BIGINT},
      seq = #{record.seq,jdbcType=BIGINT},
      `name` = #{record.name,jdbcType=VARCHAR},
      symbol = #{record.symbol,jdbcType=VARCHAR},
      `decimal` = #{record.decimal,jdbcType=INTEGER},
      contract = #{record.contract,jdbcType=VARCHAR},
      hash = #{record.hash,jdbcType=VARCHAR},
      `from` = #{record.from,jdbcType=VARCHAR},
      from_type = #{record.fromType,jdbcType=INTEGER},
      `to` = #{record.to,jdbcType=VARCHAR},
      to_type = #{record.toType,jdbcType=INTEGER},
      `value` = #{record.value,jdbcType=VARCHAR},
      bn = #{record.bn,jdbcType=BIGINT},
      b_time = #{record.bTime,jdbcType=TIMESTAMP},
      tx_fee = #{record.txFee,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tx_erc_20_bak
    set id = #{record.id,jdbcType=BIGINT},
      seq = #{record.seq,jdbcType=BIGINT},
      `name` = #{record.name,jdbcType=VARCHAR},
      symbol = #{record.symbol,jdbcType=VARCHAR},
      `decimal` = #{record.decimal,jdbcType=INTEGER},
      contract = #{record.contract,jdbcType=VARCHAR},
      hash = #{record.hash,jdbcType=VARCHAR},
      `from` = #{record.from,jdbcType=VARCHAR},
      from_type = #{record.fromType,jdbcType=INTEGER},
      `to` = #{record.to,jdbcType=VARCHAR},
      to_type = #{record.toType,jdbcType=INTEGER},
      `value` = #{record.value,jdbcType=VARCHAR},
      bn = #{record.bn,jdbcType=BIGINT},
      b_time = #{record.bTime,jdbcType=TIMESTAMP},
      tx_fee = #{record.txFee,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.turn.browser.dao.entity.TxErc20Bak">
    update tx_erc_20_bak
    <set>
      <if test="seq != null">
        seq = #{seq,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="symbol != null">
        symbol = #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="decimal != null">
        `decimal` = #{decimal,jdbcType=INTEGER},
      </if>
      <if test="contract != null">
        contract = #{contract,jdbcType=VARCHAR},
      </if>
      <if test="hash != null">
        hash = #{hash,jdbcType=VARCHAR},
      </if>
      <if test="from != null">
        `from` = #{from,jdbcType=VARCHAR},
      </if>
      <if test="fromType != null">
        from_type = #{fromType,jdbcType=INTEGER},
      </if>
      <if test="to != null">
        `to` = #{to,jdbcType=VARCHAR},
      </if>
      <if test="toType != null">
        to_type = #{toType,jdbcType=INTEGER},
      </if>
      <if test="value != null">
        `value` = #{value,jdbcType=VARCHAR},
      </if>
      <if test="bn != null">
        bn = #{bn,jdbcType=BIGINT},
      </if>
      <if test="bTime != null">
        b_time = #{bTime,jdbcType=TIMESTAMP},
      </if>
      <if test="txFee != null">
        tx_fee = #{txFee,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.turn.browser.dao.entity.TxErc20Bak">
    update tx_erc_20_bak
    set seq = #{seq,jdbcType=BIGINT},
      `name` = #{name,jdbcType=VARCHAR},
      symbol = #{symbol,jdbcType=VARCHAR},
      `decimal` = #{decimal,jdbcType=INTEGER},
      contract = #{contract,jdbcType=VARCHAR},
      hash = #{hash,jdbcType=VARCHAR},
      `from` = #{from,jdbcType=VARCHAR},
      from_type = #{fromType,jdbcType=INTEGER},
      `to` = #{to,jdbcType=VARCHAR},
      to_type = #{toType,jdbcType=INTEGER},
      `value` = #{value,jdbcType=VARCHAR},
      bn = #{bn,jdbcType=BIGINT},
      b_time = #{bTime,jdbcType=TIMESTAMP},
      tx_fee = #{txFee,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.turn.browser.dao.entity.TxErc20Bak">
    update tx_erc_20_bak
    set seq = #{seq,jdbcType=BIGINT},
      `name` = #{name,jdbcType=VARCHAR},
      symbol = #{symbol,jdbcType=VARCHAR},
      `decimal` = #{decimal,jdbcType=INTEGER},
      contract = #{contract,jdbcType=VARCHAR},
      hash = #{hash,jdbcType=VARCHAR},
      `from` = #{from,jdbcType=VARCHAR},
      from_type = #{fromType,jdbcType=INTEGER},
      `to` = #{to,jdbcType=VARCHAR},
      to_type = #{toType,jdbcType=INTEGER},
      `value` = #{value,jdbcType=VARCHAR},
      bn = #{bn,jdbcType=BIGINT},
      b_time = #{bTime,jdbcType=TIMESTAMP},
      tx_fee = #{txFee,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into tx_erc_20_bak
    (id, seq, `name`, symbol, `decimal`, contract, hash, `from`, from_type, `to`, to_type, 
      `value`, bn, b_time, tx_fee, remark)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.seq,jdbcType=BIGINT}, #{item.name,jdbcType=VARCHAR}, 
        #{item.symbol,jdbcType=VARCHAR}, #{item.decimal,jdbcType=INTEGER}, #{item.contract,jdbcType=VARCHAR}, 
        #{item.hash,jdbcType=VARCHAR}, #{item.from,jdbcType=VARCHAR}, #{item.fromType,jdbcType=INTEGER}, 
        #{item.to,jdbcType=VARCHAR}, #{item.toType,jdbcType=INTEGER}, #{item.value,jdbcType=VARCHAR}, 
        #{item.bn,jdbcType=BIGINT}, #{item.bTime,jdbcType=TIMESTAMP}, #{item.txFee,jdbcType=VARCHAR}, 
        #{item.remark,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into tx_erc_20_bak (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'seq'.toString() == column.value">
          #{item.seq,jdbcType=BIGINT}
        </if>
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'symbol'.toString() == column.value">
          #{item.symbol,jdbcType=VARCHAR}
        </if>
        <if test="'decimal'.toString() == column.value">
          #{item.decimal,jdbcType=INTEGER}
        </if>
        <if test="'contract'.toString() == column.value">
          #{item.contract,jdbcType=VARCHAR}
        </if>
        <if test="'hash'.toString() == column.value">
          #{item.hash,jdbcType=VARCHAR}
        </if>
        <if test="'from'.toString() == column.value">
          #{item.from,jdbcType=VARCHAR}
        </if>
        <if test="'from_type'.toString() == column.value">
          #{item.fromType,jdbcType=INTEGER}
        </if>
        <if test="'to'.toString() == column.value">
          #{item.to,jdbcType=VARCHAR}
        </if>
        <if test="'to_type'.toString() == column.value">
          #{item.toType,jdbcType=INTEGER}
        </if>
        <if test="'value'.toString() == column.value">
          #{item.value,jdbcType=VARCHAR}
        </if>
        <if test="'bn'.toString() == column.value">
          #{item.bn,jdbcType=BIGINT}
        </if>
        <if test="'b_time'.toString() == column.value">
          #{item.bTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'tx_fee'.toString() == column.value">
          #{item.txFee,jdbcType=VARCHAR}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>

</mapper>