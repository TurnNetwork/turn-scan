package com.turn.browser.contract;

import com.bubble.abi.solidity.EventEncoder;
import com.bubble.abi.solidity.TypeReference;
import com.bubble.abi.solidity.datatypes.*;
import com.bubble.abi.solidity.datatypes.generated.Uint256;
import com.bubble.crypto.Credentials;
import com.bubble.protocol.Web3j;
import com.bubble.protocol.core.DefaultBlockParameter;
import com.bubble.protocol.core.RemoteCall;
import com.bubble.protocol.core.methods.request.BubbleFilter;
import com.bubble.protocol.core.methods.response.Log;
import com.bubble.protocol.core.methods.response.TransactionReceipt;
import com.bubble.tuples.generated.Tuple10;
import com.bubble.tuples.generated.Tuple11;
import com.bubble.tuples.generated.Tuple3;
import com.bubble.tuples.generated.Tuple6;
import com.bubble.tx.Contract;
import com.bubble.tx.TransactionManager;
import com.bubble.tx.gas.GasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/Turnnetwork/client-sdk-java/releases">turn-web3j command line tools</a>,
 * or the com.turn.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/Turnnetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.3.0.4.
 */
public class TexasHoldem extends Contract {

    private static final String BINARY = "0x6080604052600060015534801561001557600080fd5b50615182806100256000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c806371671bf211610097578063d1d68d0f11610066578063d1d68d0f146102c8578063d67740b8146102ea578063df6b3bb4146102fd578063efaa55a01461031057600080fd5b806371671bf2146101c75780638050ffb61461028257806390dee8dc1461028b578063a57e2860146102b557600080fd5b806354f23c51116100d357806354f23c511461016d5780635fc3d52d14610180578063656429911461019357806369f2af52146101b457600080fd5b80627f1f88146101045780632d459bb814610119578063302a75841461012c5780633ccd10e91461013f575b600080fd5b610117610112366004614abd565b610323565b005b610117610127366004614abd565b610520565b61011761013a366004614abd565b6107dc565b61015261014d366004614abd565b610a1b565b60405161016496959493929190614b24565b60405180910390f35b61011761017b366004614b70565b610b34565b61011761018e366004614ba5565b611060565b6101a66101a1366004614abd565b61147b565b604051908152602001610164565b6101176101c2366004614bbe565b6115ae565b61022f6101d5366004614ba5565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600687015460078801546008890154600b90990154979896979596949593949293919290916001600160a01b03168a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008301526001600160a01b031661012082015261014001610164565b6101a660015481565b61029e610299366004614ba5565b6117a1565b6040516101649b9a99989796959493929190614c2c565b6101176102c3366004614ca7565b6118be565b6102db6102d6366004614ba5565b611cf0565b60405161016493929190614ced565b6101176102f8366004614ca7565b611d0b565b61011761030b366004614ca7565b611ea8565b61011761031e366004614ba5565b612107565b818160008060008481526020019081526020016000209050816001600160a01b031681600c0182600801548154811061035e5761035e614d2e565b6000918252602090912001546001600160a01b0316146103995760405162461bcd60e51b815260040161039090614d44565b60405180910390fd5b600085815260208190526040902060018101548691906103cb5760405162461bcd60e51b815260040161039090614d93565b6000878152602081815260408083206001600160a01b038a168452600d8101909252909120600601548891889160ff166104175760405162461bcd60e51b815260040161039090614dca565b60008a8152602081815260408083206001600160a01b038d168452600d8101909252909120546007820154146104c75760405162461bcd60e51b815260206004820152604960248201527f54686520706c61796572277320626574732068617665206e6f7420726561636860448201527f656420746865206d6178696d756d2062657473206f6620746865206375727265606482015268373a103937bab7321760b91b608482015260a401610390565b604080518c81526001600160a01b038c1660208201527fc050b7f27c0dfc35ce6357f77f7e8bae1ed17066f5cf4669e1c6932c84b1c018910160405180910390a1610513816001612152565b5050505050505050505050565b818160008060008481526020019081526020016000209050816001600160a01b031681600c0182600801548154811061055b5761055b614d2e565b6000918252602090912001546001600160a01b03161461058d5760405162461bcd60e51b815260040161039090614d44565b600085815260208190526040902060018101548691906105bf5760405162461bcd60e51b815260040161039090614d93565b6000878152602081815260408083206001600160a01b038a168452600d8101909252909120600601548891889160ff1661060b5760405162461bcd60e51b815260040161039090614dca565b60008a8152602081815260408083206001600160a01b038d168452600d8101909252909120546007820154116106cf5760405162461bcd60e51b815260206004820152605760248201527f5468652063757272656e7420706c6179657227732062657420616d6f756e742060448201527f6861732072656163686564207468652063757272656e74206d6178696d756d2060648201527f62657420616d6f756e742c2043616e6e6f742063616c6c000000000000000000608482015260a401610390565b6001600160a01b038a166000908152600d8201602052604081205460078301546106f99190614e0f565b6001600160a01b038c166000908152600d8401602052604081206005018054929350839290919061072b908490614e0f565b90915550506001600160a01b038b166000908152600d830160205260408120805483929061075a908490614e28565b92505081905550808260060160008282546107759190614e28565b9091555050604080518d81526001600160a01b038d1660208201529081018290527f842aa798c4ea333b4a0d5c50e0edd679e149b584477ce78293684eb89d515bd09060600160405180910390a16107ce826000612152565b505050505050505050505050565b818160008060008481526020019081526020016000209050816001600160a01b031681600c0182600801548154811061081757610817614d2e565b6000918252602090912001546001600160a01b0316146108495760405162461bcd60e51b815260040161039090614d44565b6000858152602081905260409020600181015486919061087b5760405162461bcd60e51b815260040161039090614d93565b6000878152602081815260408083206001600160a01b038a168452600d8101909252909120600601548891889160ff166108c75760405162461bcd60e51b815260040161039090614dca565b60008a8152602081815260408083206001600160a01b038d168452600d8101909252909120600601805460ff191690556005810154600c82018054909190811061091357610913614d2e565b6000918252602090912001546001600160a01b03908116908b16036109cf5760015b600c8201548110156109cd57600c8201546005830154610956908390614e28565b6109609190614e51565b60058301819055600c8301805460009290811061097f5761097f614d2e565b60009182526020808320909101546001600160a01b0316808352600d860190915260409091206006015490915060ff16156109ba57506109cd565b50806109c581614e65565b915050610935565b505b604080518c81526001600160a01b038c1660208201527f02b23f560d14840a9b76edf006bd957d9836d70c44760295ef7f06410681ca89910160405180910390a1610513816000612152565b6000828152602081815260408083206001600160a01b0385168452600d8101835281842080546003820154600490920180548551818802810188019096528086529196929560609593948594879491939092909190830182828015610a9f57602002820191906000526020600020905b815481526020019060010190808311610a8b575b505050506001600160a01b038a166000908152600d840160209081526040918290206005810154600682015460079092018054855181860281018601909652808652969b5090995060ff90911697509193919250830182828015610b2257602002820191906000526020600020905b815481526020019060010190808311610b0e575b50505050509150509295509295509295565b828260008060008481526020019081526020016000209050816001600160a01b031681600c01826008015481548110610b6f57610b6f614d2e565b6000918252602090912001546001600160a01b031614610ba15760405162461bcd60e51b815260040161039090614d44565b60008681526020819052604090206001810154879190610bd35760405162461bcd60e51b815260040161039090614d93565b6000888152602081815260408083206001600160a01b038b168452600d8101909252909120600601548991899160ff16610c1f5760405162461bcd60e51b815260040161039090614dca565b60008060008d81526020019081526020016000209050806001015481600d0160008d6001600160a01b03166001600160a01b031681526020019081526020016000206001015403610d1d576001600160a01b038b166000908152600d82016020526040902060020154600411610cea5760405162461bcd60e51b815260206004820152602a60248201527f4e6f206d6f7265207468616e2034207261697365732070657220706c61796572604482015269081c195c881c9bdd5b9960b21b6064820152608401610390565b6001600160a01b038b166000908152600d820160205260408120600201805491610d1383614e65565b9190505550610d49565b6001808201546001600160a01b038d166000908152600d84016020526040902080830191909155600201555b6001600160a01b038b166000908152600d820160205260408120546007830154610d739190614e0f565b9050816001015460011480610d8c575081600101546002145b15610e36576004820154610da09082614e28565b8b14610e315760405162461bcd60e51b815260206004820152605460248201527f54686520746f74616c20616d6f756e7420726169736564206973206e6f74206560448201527f7175616c20746f207468652073756d206f66207468652063616c6c20616d6f756064820152731b9d08185b99081d1a19481cdb585b1b0818995d60621b608482015260a401610390565b610efb565b816001015460031480610e4d575081600101546004145b15610efb576004820154610e62906002614e7e565b610e6c9082614e28565b8b14610efb5760405162461bcd60e51b815260206004820152605260248201527f54686520746f74616c20616d6f756e7420726169736564206973206e6f74206560448201527f7175616c20746f207468652073756d206f66207468652063616c6c20616d6f756064820152711b9d08185b99081d1a1948189a59c818995d60721b608482015260a401610390565b6001600160a01b038c166000908152600d830160205260409020600501548b1115610f5d5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606401610390565b6001600160a01b038c166000908152600d83016020526040812060050180548d9290610f8a908490614e0f565b90915550506001600160a01b038c166000908152600d83016020526040902054610fb4908c614e28565b600783018190556001600160a01b038d166000908152600d840160205260408120919091556006830180548d9290610fed908490614e28565b90915550506007820154604080518f81526001600160a01b038f1660208201528082018e90526060810192909252517faed2a0fbda9a891043bcd09409b629f648c23b25f29fcaa98ecf6ec0cf33bb989181900360800190a1611051826000612152565b50505050505050505050505050565b60008181526020819052604090206001810154829190156110c35760405162461bcd60e51b815260206004820152601d60248201527f47616d652069732072756e6e696e672c206e6f742073746f707065642e0000006044820152606401610390565b6000838152602081905260409020600c810154600211156111425760405162461bcd60e51b815260206004820152603360248201527f4174206c656173742074776f20706c61796572732061726520726571756972656044820152726420746f207374617274207468652067616d6560681b6064820152608401610390565b600c810180546002830154600092919061115d906001614e28565b6111679190614e51565b8154811061117757611177614d2e565b600091825260209091200154600c8301546002808501546001600160a01b03909316935090916111a691614e28565b6111b09190614e51565b60058301819055600c830180546000929081106111cf576111cf614d2e565b600091825260208083209091015460038601546001600160a01b038681168552600d8801909352604090932060050154911692501015611279576040805162461bcd60e51b81526020600482015260248101919091527f54686520706c6179657227732072656d61696e696e672063686970732061726560448201527f206c657373207468616e2074686520736d616c6c20626c696e642773206265746064820152608401610390565b60048301546001600160a01b0382166000908152600d8501602052604090206005015410156113105760405162461bcd60e51b815260206004820152603e60248201527f54686520706c6179657227732072656d61696e696e672063686970732061726560448201527f206c657373207468616e207468652062696720626c696e6427732062657400006064820152608401610390565b6113198361238a565b6003830180546001600160a01b038085166000818152600d8801602052604080822094855560048901549387168252812092909255925492815260059091018054909190611368908490614e0f565b909155505060048301546001600160a01b0382166000908152600d850160205260408120600501805490919061139f908490614e0f565b9091555050600483015460038401546113b89190614e28565b8360060160008282546113cb9190614e28565b909155505060048301546007840155600c83015460028401546113ef906003614e28565b6113f99190614e51565b600884015560018084015560408051600580825260c08201909252906020820160a080368337505081516114369260098701925060200190614a04565b507f3c2474ec439f00e11f67001bab348a59b16ce67dcd80ac2c02cffb6025c369ae8684600c0160405161146b929190614eab565b60405180910390a1505050505050565b600082815260208190526040812060018101548491906114ad5760405162461bcd60e51b815260040161039090614d93565b6000858152602081815260408083206001600160a01b0388168452600d8101909252909120600601548691869160ff166114f95760405162461bcd60e51b815260040161039090614dca565b6000888152602081815260408083206001600160a01b038b168452600d810190925282205460078201549192916115309190614e0f565b9050816001015460011480611549575081600101546002145b1561156657600482015461155d9082614e28565b975050506115a3565b81600101546003148061157d575081600101546004145b1561159c576004820154611592906002614e7e565b61155d9082614e28565b6000975050505b505050505092915050565b6000831161160e5760405162461bcd60e51b815260206004820152602760248201527f54686520736d616c6c20626c696e64206d7573742062652067726561746572206044820152663a3430b710181760c91b6064820152608401610390565b8282116116795760405162461bcd60e51b815260206004820152603360248201527f5468652062696720626c696e64206d757374206265206772656174657220746860448201527230b7103a34329039b6b0b63610313634b7321760691b6064820152608401610390565b600180546000818152602081815260408083209384556003840188905560048401879055600b840180546001600160a01b0319166001600160a01b038816179055600284018390556006840183905593830191909155825160348082526106a082019094529192908201610680803683375050815161170192600a8501925060200190614a04565b5060408051600580825260c08201909252906020820160a080368337505081516117349260098501925060200190614a04565b506001805490600061174583614e65565b90915550508054604080519182526020820186905281018490526001600160a01b03831660608201527f53dbc26698eabe675ae56770a604e8c49ea838c1698b6ae716e2d799d300e0b09060800160405180910390a150505050565b6000818152602081815260409182902060018101546002820154600383015460048401546005850154600686015460078701546008880154600b89015460098a0180548d51818e0281018e01909e52808e52999c989b979a969995989497939692956001600160a01b03909216946060948594939192919083018282801561184857602002820191906000526020600020905b815481526020019060010190808311611834575b5050505050925080600c018054806020026020016040519081016040528092919081815260200182805480156118a757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611889575b505050505091505091939597999b90929496989a50565b60008281526020819052604090206001810154839190156119215760405162461bcd60e51b815260206004820152601d60248201527f47616d652069732072756e6e696e672c206e6f742073746f707065642e0000006044820152606401610390565b6000848152602081905260408120600b810154869233928792909190611950906001600160a01b031685612630565b9050828110156119a25760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820616c6c6f77656420616d6f756e742e0000000000006044820152606401610390565b60008981526020819052604090206003810154611a015760405162461bcd60e51b815260206004820152601760248201527f47616d65207461626c65206e6f7420637265617465642e0000000000000000006044820152606401610390565b8060040154891015611a6e5760405162461bcd60e51b815260206004820152603060248201527f506c61796572206368697073206d75737420626520677265617465722074686160448201526f37103a3432903134b390313634b7321760811b6064820152608401610390565b336000908152600d8201602052604090206008015460ff1615611ad35760405162461bcd60e51b815260206004820152601b60248201527f506c6179657220686173206a6f696e6564207468652067616d652e00000000006044820152606401610390565b600c810154600811611b455760405162461bcd60e51b815260206004820152603560248201527f546865206e756d626572206f6620706c6179657273206861732065786365656460448201527432b2103a34329036b0bc34b6bab6903634b6b4ba1760591b6064820152608401610390565b600b810154611b5f906001600160a01b031633308c612737565b611bb2604051806101200160405280600081526020016000815260200160008152602001600081526020016060815260200160008152602001600015158152602001606081526020016000151581525090565b6001610100820181905260a082018b905260c08201819052336000908152600d840160209081526040918290208451815581850151938101939093559083015160028301556060830151600383015560808301518051849392611c1c926004850192910190614a04565b5060a0820151600582015560c082015160068201805460ff191691151591909117905560e08201518051611c5a916007840191602090910190614a04565b5061010091909101516008909101805460ff1916911515919091179055600c820180546001810182556000918252602091829020018054336001600160a01b03199091168117909155604080518e81529283019190915281018b90527ff66778a71ad05be3533189f52b3685653815adca5f24272e139571b8e1892f5e9060600160405180910390a15050505050505050505050565b6000806060611cfe84612840565b9250925092509193909250565b6000828152602081905260408120600b810154849233928592909190611d3a906001600160a01b031685612630565b905082811015611d8c5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820616c6c6f77656420616d6f756e742e0000000000006044820152606401610390565b600087815260208181526040808320338452600d81019092529091206008015460ff16611dfb5760405162461bcd60e51b815260206004820181905260248201527f53656e646572206973206e6f7420696e207468652067616d65207461626c652e6044820152606401610390565b60008711611e5b5760405162461bcd60e51b815260206004820152602760248201527f4164646974696f6e616c206368697073206d75737420626520677265617465726044820152660207468616e20360cc1b6064820152608401610390565b600b810154611e75906001600160a01b031633308a612737565b336000908152600d8201602052604081206005018054899290611e99908490614e28565b90915550505050505050505050565b60008111611ef85760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610390565b600082815260208181526040808320338452600d81019092529091206008015460ff16611f675760405162461bcd60e51b815260206004820181905260248201527f53656e646572206973206e6f7420696e207468652067616d65207461626c652e6044820152606401610390565b336000908152600d82016020526040902060050154821115611fe95760405162461bcd60e51b815260206004820152603560248201527f5468652072656d61696e696e6720636869707320617265206e6f7420656e6f7560448201527433b4103a379032bc31b430b733b2902a37b5b2b71760591b6064820152608401610390565b336000908152600d820160205260408120600501805484929061200d908490614e0f565b90915550506040513360248201526044810183905260009060640160408051601f198184030181529181526020820180516001600160e01b031663a9059cbb60e01b179052600b84015490519192506000916001600160a01b0390911690612076908490614f07565b6000604051808303816000865af19150503d80600081146120b3576040519150601f19603f3d011682016040523d82523d6000602084013e6120b8565b606091505b50509050806121005760405162461bcd60e51b815260206004820152601460248201527310d85b1b081d1c985b9cd9995c8819985a5b195960621b6044820152606401610390565b5050505050565b60015480156121445760015460408051426020820152016040516020818303038152906040528051906020012060001c6121419190614e51565b90505b61214e81836118be565b5050565b600080805b600c8501548110156121d357600085600c01828154811061217a5761217a614d2e565b60009182526020808320909101546001600160a01b0316808352600d890190915260409091206006015490915060ff16156121c057836121b981614e65565b9450508092505b50806121cb81614e65565b915050612157565b50816001036122c15760068401546001600160a01b0382166000908152600d860160205260408120600501805490919061220e908490614e28565b909155505060408051600180825281830190925260009160208083019080368337019050509050818160008151811061224957612249614d2e565b60200260200101906001600160a01b031690816001600160a01b0316815250507f1107f77f1a3d9982743a49b96e04b2bbfec676f9b78805f5285c1412edbad2b28560000154600183600089600601546040516122aa959493929190614f23565b60405180910390a16122bb85612a92565b50612384565b836005015484600801541480156122d55750825b156122e3576122e384612b96565b600884015460015b600c86015481101561237d57600c860154600887015461230c908390614e28565b6123169190614e51565b9150600086600c01838154811061232f5761232f614d2e565b60009182526020808320909101546001600160a01b0316808352600d8a0190915260409091206006015490915060ff161561236a575061237d565b508061237581614e65565b9150506122eb565b5060088501555b50505050565b60005b600a8201548110156123cd578082600a0182815481106123af576123af614d2e565b600091825260209091200155806123c581614e65565b91505061238d565b50600a8101546000906123e290600190614e0f565b90505b80156124d85760006123f8826001614e28565b83546040805160208101929092524290820152606081018490526080016040516020818303038152906040528051906020012060001c6124389190614e51565b905082600a01818154811061244f5761244f614d2e565b906000526020600020015483600a01838154811061246f5761246f614d2e565b906000526020600020015484600a01848154811061248f5761248f614d2e565b90600052602060002001600086600a0185815481106124b0576124b0614d2e565b60009182526020909120019290925591909155508190506124d081614f56565b9150506123e5565b5060005b600c82015481101561214e57600082600c0182815481106124ff576124ff614d2e565b6000918252602080832091909101546001600160a01b0316808352600d8601808352604080852060068101805460ff191660011790556003810186905581518681528086019283905295849052919093529251909350612563926004019190614a04565b506001600160a01b0381166000908152600d840160205260409020600a840180546007909201918490811061259a5761259a614d2e565b60009182526020808320909101548354600181018555938352818320909301929092556001600160a01b0383168152600d850190915260409020600c840154600790910190600a8501906125ee9085614e28565b815481106125fe576125fe614d2e565b60009182526020808320909101548354600181018555938352912090910155508061262881614e65565b9150506124dc565b6040516001600160a01b0382166024820152306044820152600090819060640160408051601f198184030181529181526020820180516001600160e01b0316636eb1769f60e11b1790525190915060009081906001600160a01b03871690612699908590614f07565b600060405180830381855afa9150503d80600081146126d4576040519150601f19603f3d011682016040523d82523d6000602084013e6126d9565b606091505b5091509150816127245760405162461bcd60e51b815260206004820152601660248201527521b0b6361030b63637bbb0b731b2903330b4b632b21760511b6044820152606401610390565b61272d81614f6d565b9695505050505050565b6040516001600160a01b038085166024830152831660448201526064810182905260009060840160408051601f198184030181529181526020820180516001600160e01b03166323b872dd60e01b179052519091506000906001600160a01b038716906127a5908490614f07565b6000604051808303816000865af19150503d80600081146127e2576040519150601f19603f3d011682016040523d82523d6000602084013e6127e7565b606091505b50509050806128385760405162461bcd60e51b815260206004820152601960248201527f43616c6c207472616e7366657246726f6d206661696c65642e000000000000006044820152606401610390565b505050505050565b6040805160c080820183526003608080840182815262e299a360e81b60a0808701919091529085528551808701875283815262714cd360e91b602082810191909152808701919091528651808801885284815262e299a560e81b818301528688015286518088018852848152620714cd60ed1b8183015260608781019190915287516101e08101895260016101a08201818152601960f91b6101c084015282528951808b018b52818152603360f81b81860152828501528951808b018b52818152600d60fa1b81860152828b01528951808b018b52818152603560f81b81860152828401528951808b018b52818152601b60f91b81860152958201959095528851808a018a52858152603760f81b818501529381019390935287518089018952848152600760fb1b818401529583019590955286518088018852838152603960f81b8183015260e0830152865180880188526002815261031360f41b8183015261010083015286518088018852838152602560f91b8183015261012083015286518088018852838152605160f81b8183015261014083015286518088018852928352604b60f81b8382015261016082019290925285518087019096529185526241636560e81b90850152610180810193909352600092839290612a24600d87614f94565b9450612a31600d87614e51565b9350818560ff1660048110612a4857612a48614d2e565b6020020151818560ff16600d8110612a6257612a62614d2e565b6020020151604051602001612a78929190614fa8565b604051602081830303815290604052925050509193909250565b60006001808301829055600683018290556007830191909155600c82015460028301549091612ac19190614e28565b612acb9190614e51565b600282015560005b600c820154811015612b5c57600082600c018281548110612af657612af6614d2e565b6000918252602080832091909101546001600160a01b0316808352600d8601808352604080852085815581518681528086019283905295849052919093529251909350612b47926007019190614a04565b50508080612b5490614e65565b915050612ad3565b5080546040519081527f3496ed15a97ad1d154265bf94e0068b3b45bed65b26cb72ecc4e1b8a44d9b3d7906020015b60405180910390a150565b6001816001015403612ce357600c810154600a820190612bb7906002614e7e565b612bc2906001614e28565b81548110612bd257612bd2614d2e565b906000526020600020015481600901600081548110612bf357612bf3614d2e565b600091825260209091200155600c810154600a820190612c14906002614e7e565b612c1f906002614e28565b81548110612c2f57612c2f614d2e565b906000526020600020015481600901600181548110612c5057612c50614d2e565b600091825260209091200155600c810154600a820190612c71906002614e7e565b612c7c906003614e28565b81548110612c8c57612c8c614d2e565b906000526020600020015481600901600281548110612cad57612cad614d2e565b60009182526020909120015560026001820155805460405160008051602061512d83398151915291612b8b916009850190615019565b6002816001015403612d7657600c810154600a820190612d04906002614e7e565b612d0f906005614e28565b81548110612d1f57612d1f614d2e565b906000526020600020015481600901600381548110612d4057612d40614d2e565b60009182526020909120015560036001820155805460405160008051602061512d83398151915291612b8b916009850190615055565b6003816001015403612e095760046001820155600c810154600a820190612d9e906002614e7e565b612da9906007614e28565b81548110612db957612db9614d2e565b906000526020600020015481600901600481548110612dda57612dda614d2e565b600091825260209091200155805460405160008051602061512d83398151915291612b8b916009850190615089565b6004816001015403612e5257612e1e81612e55565b805460405160008051602061512d83398151915291612e419160098501906150be565b60405180910390a1612e5281612a92565b50565b600c81015460009067ffffffffffffffff811115612e7557612e75614e95565b604051908082528060200260200182016040528015612e9e578160200160208202803683370190505b509050606060005b600c8401548110156130f157600084600c018281548110612ec957612ec9614d2e565b600091825260208220015460098701546001600160a01b039091169250612ef1906002614e28565b67ffffffffffffffff811115612f0957612f09614e95565b604051908082528060200260200182016040528015612f32578160200160208202803683370190505b506001600160a01b0383166000908152600d880160205260408120600701805492935091612f6257612f62614d2e565b906000526020600020015481600081518110612f8057612f80614d2e565b60200260200101818152505085600d016000836001600160a01b03166001600160a01b03168152602001908152602001600020600701600181548110612fc857612fc8614d2e565b906000526020600020015481600181518110612fe657612fe6614d2e565b60200260200101818152505060005b600987015481101561305c5786600901818154811061301657613016614d2e565b90600052602060002001548282600261302f9190614e28565b8151811061303f5761303f614d2e565b60209081029190910101528061305481614e65565b915050612ff5565b50613066816133a8565b86858151811061307857613078614d2e565b6020026020010181965082815250505084838151811061309a5761309a614d2e565b6020908102919091018101516001600160a01b0384166000908152600d8901835260409020600381019190915585516130db92600490920191870190614a04565b50505080806130e990614e65565b915050612ea6565b50600c830154600090819067ffffffffffffffff81111561311457613114614e95565b60405190808252806020026020018201604052801561313d578160200160208202803683370190505b5090506000805b600c87015481101561328257600087600c01828154811061316757613167614d2e565b60009182526020808320909101546001600160a01b0316808352600d8b0190915260409091206006015490915060ff161561326f57848783815181106131af576131af614d2e565b60200260200101511115613216578682815181106131cf576131cf614d2e565b602002602001015194506001925080846000815181106131f1576131f1614d2e565b60200260200101906001600160a01b031690816001600160a01b03168152505061326f565b8487838151811061322957613229614d2e565b60200260200101510361326f578084848151811061324957613249614d2e565b6001600160a01b03909216602092830291909101909101528261326b81614e65565b9350505b508061327a81614e65565b915050613144565b5060008187600601546132959190614f94565b905060005b8281101561330d578188600d0160008684815181106132bb576132bb614d2e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060050160008282546132f59190614e28565b9091555081905061330581614e65565b91505061329a565b50600087600601819055507f1107f77f1a3d9982743a49b96e04b2bbfec676f9b78805f5285c1412edbad2b2876000015483858a600d0160008860008151811061335957613359614d2e565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206003015485604051613397959493929190614f23565b60405180910390a150505050505050565b600060606133b5836133be565b91509150915091565b600060606000806133ce856134f0565b9150915081156133e457600a9590945092505050565b6133ed856137db565b909250905081156134045760099590945092505050565b61340d85613a9b565b909250905081156134245760089590945092505050565b61342d85613c30565b909250905081156134445760079590945092505050565b61344d85613ecd565b909250905081156134645760069590945092505050565b61346d8561405e565b909250905081156134845760059590945092505050565b61348d856142d4565b909250905081156134a45760049590945092505050565b6134ad85614477565b909250905081156134c45760039590945092505050565b6134cd8561464d565b909250905081156134e45760029590945092505050565b60019590945092505050565b6000606060006134ff84614799565b9050613509614a4f565b60005b82518110156135715781600d84838151811061352a5761352a614d2e565b602002602001015161353c9190614f94565b6004811061354c5761354c614d2e565b6020020180519061355c82614e65565b9052508061356981614e65565b91505061350c565b5060408051600580825260c082019092526000916020820160a08036833701905050905060005b60048110156137bd5760058382600481106135b5576135b5614d2e565b6020020151106137ab5760005b81600d8683815181106135d7576135d7614d2e565b60200260200101516135e99190614f94565b1461360057806135f881614e65565b9150506135c2565b84818151811061361257613612614d2e565b60200260200101518360008151811061362d5761362d614d2e565b6020026020010181815250506000600190506000600d87848151811061365557613655614d2e565b60200260200101516136679190614e51565b9050806008036137a357600061367e846001614e28565b90505b87518110156137a15784600d89838151811061369f5761369f614d2e565b60200260200101516136b19190614f94565b1480156136ec57506136c4826001614e28565b600d8983815181106136d8576136d8614d2e565b60200260200101516136ea9190614e51565b145b156137625787818151811061370357613703614d2e565b602002602001015186848151811061371d5761371d614d2e565b60209081029190910101528261373281614e65565b93505082600503613750575060019a94995093975050505050505050565b8161375a81614e65565b92505061378f565b84600d89838151811061377757613777614d2e565b60200260200101516137899190614f94565b036137a1575b8061379981614e65565b915050613681565b505b5050506137bd565b806137b581614e65565b915050613598565b50506040805160008082526020820190925290969095509350505050565b6000606060006137ea84614799565b90506137f4614a4f565b60005b825181101561385c5781600d84838151811061381557613815614d2e565b60200260200101516138279190614f94565b6004811061383757613837614d2e565b6020020180519061384782614e65565b9052508061385481614e65565b9150506137f7565b5060408051600580825260c082019092526000916020820160a08036833701905050905060005b60048110156137bd5760058382600481106138a0576138a0614d2e565b602002015110613a895760005b81600d8683815181106138c2576138c2614d2e565b60200260200101516138d49190614f94565b146138eb57806138e381614e65565b9150506138ad565b8481815181106138fd576138fd614d2e565b60200260200101518360008151811061391857613918614d2e565b6020026020010181815250506000600190506000600d87848151811061394057613940614d2e565b60200260200101516139529190614e51565b90506000613961846001614e28565b90505b8751811015613a845784600d89838151811061398257613982614d2e565b60200260200101516139949190614f94565b1480156139cf57506139a7826001614e28565b600d8983815181106139bb576139bb614d2e565b60200260200101516139cd9190614e51565b145b15613a45578781815181106139e6576139e6614d2e565b6020026020010151868481518110613a0057613a00614d2e565b602090810291909101015282613a1581614e65565b93505082600503613a33575060019a94995093975050505050505050565b81613a3d81614e65565b925050613a72565b84600d898381518110613a5a57613a5a614d2e565b6020026020010151613a6c9190614f94565b03613a84575b80613a7c81614e65565b915050613964565b505050505b80613a9381614e65565b915050613883565b60408051600480825260a0820190925260009160609183918291906020820160808036833701905050905060005b8551811015613c0f5760019250858181518110613ae857613ae8614d2e565b602002602001015182600185613afe9190614e0f565b81518110613b0e57613b0e614d2e565b60209081029190910101526000613b26826001614e28565b90505b8651811015613be757600d878281518110613b4657613b46614d2e565b6020026020010151613b589190614e51565b600d888481518110613b6c57613b6c614d2e565b6020026020010151613b7e9190614e51565b03613bd55783613b8d81614e65565b945050868181518110613ba257613ba2614d2e565b602002602001015183600186613bb89190614e0f565b81518110613bc857613bc8614d2e565b6020026020010181815250505b80613bdf81614e65565b915050613b29565b5082600403613bfd575060019590945092505050565b80613c0781614e65565b915050613ac9565b5060408051600080825260208201909252905b506000969095509350505050565b60006060613c3c614a6d565b6000198060006060815b88518160ff161015613cb45785600d8a8360ff1681518110613c6a57613c6a614d2e565b6020026020010151613c7c9190614e51565b600d8110613c8c57613c8c614d2e565b60200201805190613c9c826150f4565b60ff1690525080613cac816150f4565b915050613c46565b5060005b600d8160ff161015613da65760008512613d2457858160ff16600d8110613ce157613ce1614d2e565b602002015160ff1660031480613d135750858160ff16600d8110613d0757613d07614d2e565b602002015160ff166002145b15613d1f578060000b93505b613d7e565b858160ff16600d8110613d3957613d39614d2e565b602002015160ff16600303613d53578060000b9450613d7e565b858160ff16600d8110613d6857613d68614d2e565b602002015160ff16600203613d7e578060000b93505b60008512158015613d90575060008412155b613da65780613d9e816150f4565b915050613cb8565b5060008412158015613db9575060008312155b91508115613ec05760408051600580825260c08201909252906020820160a0803683370190505090506000805b89518160ff161015613ebd57600d8a8260ff1681518110613e0957613e09614d2e565b6020026020010151613e1b9190614e51565b861480613e4f5750600d8a8260ff1681518110613e3a57613e3a614d2e565b6020026020010151613e4c9190614e51565b85145b15613eab57898160ff1681518110613e6957613e69614d2e565b6020026020010151838380613e7d906150f4565b945060ff1681518110613e9257613e92614d2e565b60200260200101818152505060058260ff161015613ebd575b80613eb5816150f4565b915050613de6565b50505b9097909650945050505050565b600060606000613edc84614799565b9050613ee6614a4f565b606060005b8351811015613f505782600d858381518110613f0957613f09614d2e565b6020026020010151613f1b9190614f94565b60048110613f2b57613f2b614d2e565b60200201805190613f3b82614e65565b90525080613f4881614e65565b915050613eeb565b5060005b6004811015613c22576005838260048110613f7157613f71614d2e565b60200201511061404c5760408051600580825260c08201909252906020820160a0803683370190505091506000805b855183101561403b57600d868281518110613fbd57613fbd614d2e565b6020026020010151613fcf9190614f94565b830361402957858181518110613fe757613fe7614d2e565b6020026020010151848380613ffb906150f4565b945060ff168151811061401057614010614d2e565b60200260200101818152505060058260ff16101561403b575b8061403381614e65565b915050613fa0565b506001989297509195505050505050565b8061405681614e65565b915050613f54565b60006060600061406d846148c6565b9050614077614a6d565b60606000805b84518160ff1610156140eb5783600d868360ff16815181106140a1576140a1614d2e565b60200260200101516140b39190614e51565b600d81106140c3576140c3614d2e565b602002018051906140d3826150f4565b60ff16905250806140e3816150f4565b91505061407d565b506000805b600d8160ff16101561416e576000858260ff16600d811061411357614113614d2e565b602002015160ff161115614142578160ff16600003614130578092505b8161413a816150f4565b925050614150565b60ff82161561415057600091505b60058260ff16101561416e5780614166816150f4565b9150506140f0565b5060058160ff16106142c45760408051600580825260c08201909252906020820160a08036833701905050925060008060005b87518160ff1610156142b1576141b78386615113565b60ff16600d898360ff16815181106141d1576141d1614d2e565b60200260200101516141e39190614e51565b1480156142185750600d888260ff168151811061420257614202614d2e565b60200260200101516142149190614e51565b8214155b1561429f57600d888260ff168151811061423457614234614d2e565b60200260200101516142469190614e51565b9150878160ff168151811061425d5761425d614d2e565b6020026020010151868480614271906150f4565b955060ff168151811061428657614286614d2e565b60200260200101818152505060058360ff1610156142b1575b806142a9816150f4565b9150506141a1565b5060019a94995093975050505050505050565b5060009791965090945050505050565b6000606060006142e3846148c6565b60408051600380825260808201909252919250600091600191839190602082016060803683370190505090508360008151811061432257614322614d2e565b60200260200101518160008151811061433d5761433d614d2e565b602090810291909101015260015b845181101561445857600d85858151811061436857614368614d2e565b602002602001015161437a9190614e51565b600d86838151811061438e5761438e614d2e565b60200260200101516143a09190614e51565b036143ee578481815181106143b7576143b7614d2e565b60200260200101518284806143cb90614e65565b9550815181106143dd576143dd614d2e565b60200260200101818152505061442f565b80935084818151811061440357614403614d2e565b60200260200101518260008151811061441e5761441e614d2e565b602002602001018181525050600192505b826003036144465750600197909650945050505050565b8061445081614e65565b91505061434b565b5050604080516000808252602082019092529097909650945050505050565b600060606000614486846148c6565b60408051600480825260a0820190925291925060009182918291906020820160808036833701905050905060015b845181101561445857600d8585815181106144d1576144d1614d2e565b60200260200101516144e39190614e51565b600d8683815181106144f7576144f7614d2e565b60200260200101516145099190614e51565b03614637578261451881614e65565b9350508260010361459a5784848151811061453557614535614d2e565b60200260200101518260008151811061455057614550614d2e565b60200260200101818152505084818151811061456e5761456e614d2e565b60200260200101518260018151811061458957614589614d2e565b602002602001018181525050614622565b82600203614622578484815181106145b4576145b4614d2e565b6020026020010151826002815181106145cf576145cf614d2e565b6020026020010181815250508481815181106145ed576145ed614d2e565b60200260200101518260038151811061460857614608614d2e565b602090810291909101015250600197909650945050505050565b61462d816001614e28565b935083905061463b565b8093505b8061464581614e65565b9150506144b4565b60006060600061465c846148c6565b9050606060005b600183516146719190614e0f565b81101561478c57600d83614686836001614e28565b8151811061469657614696614d2e565b60200260200101516146a89190614e51565b600d8483815181106146bc576146bc614d2e565b60200260200101516146ce9190614e51565b0361477a57604080516002808252606082018352909160208301908036833701905050915082818151811061470557614705614d2e565b60200260200101518260008151811061472057614720614d2e565b602090810291909101015282614737826001614e28565b8151811061474757614747614d2e565b60200260200101518260018151811061476257614762614d2e565b60209081029190910101525060019590945092505050565b8061478481614e65565b915050614663565b5060009590945092505050565b606060005b82518110156148bf5760005b60018285516147b99190614e0f565b6147c39190614e0f565b8110156148ac57836147d6826001614e28565b815181106147e6576147e6614d2e565b602002602001015184828151811061480057614800614d2e565b6020026020010151111561489a57600084828151811061482257614822614d2e565b602002602001015190508482600161483a9190614e28565b8151811061484a5761484a614d2e565b602002602001015185838151811061486457614864614d2e565b6020908102919091010152808561487c846001614e28565b8151811061488c5761488c614d2e565b602002602001018181525050505b806148a481614e65565b9150506147aa565b50806148b781614e65565b91505061479e565b5090919050565b606060005b82518110156148bf5760005b60018285516148e69190614e0f565b6148f09190614e0f565b8110156149f157600d84614905836001614e28565b8151811061491557614915614d2e565b60200260200101516149279190614e51565b600d85838151811061493b5761493b614d2e565b602002602001015161494d9190614e51565b11156149df57600084828151811061496757614967614d2e565b602002602001015190508482600161497f9190614e28565b8151811061498f5761498f614d2e565b60200260200101518583815181106149a9576149a9614d2e565b602090810291909101015280856149c1846001614e28565b815181106149d1576149d1614d2e565b602002602001018181525050505b806149e981614e65565b9150506148d7565b50806149fc81614e65565b9150506148cb565b828054828255906000526020600020908101928215614a3f579160200282015b82811115614a3f578251825591602001919060010190614a24565b50614a4b929150614a8c565b5090565b60405180608001604052806004906020820280368337509192915050565b604051806101a00160405280600d906020820280368337509192915050565b5b80821115614a4b5760008155600101614a8d565b80356001600160a01b0381168114614ab857600080fd5b919050565b60008060408385031215614ad057600080fd5b82359150614ae060208401614aa1565b90509250929050565b600081518084526020808501945080840160005b83811015614b1957815187529582019590820190600101614afd565b509495945050505050565b86815285602082015260c060408201526000614b4360c0830187614ae9565b856060840152841515608084015282810360a0840152614b638185614ae9565b9998505050505050505050565b600080600060608486031215614b8557600080fd5b83359250614b9560208501614aa1565b9150604084013590509250925092565b600060208284031215614bb757600080fd5b5035919050565b600080600060608486031215614bd357600080fd5b8335925060208401359150614bea60408501614aa1565b90509250925092565b600081518084526020808501945080840160005b83811015614b195781516001600160a01b031687529582019590820190600101614c07565b60006101608d83528c60208401528b60408401528a60608401528960808401528860a08401528760c08401528660e084015260018060a01b03861661010084015280610120840152614c8081840186614ae9565b9050828103610140840152614c958185614bf3565b9e9d5050505050505050505050505050565b60008060408385031215614cba57600080fd5b50508035926020909101359150565b60005b83811015614ce4578181015183820152602001614ccc565b50506000910152565b8381528260208201526060604082015260008251806060840152614d18816080850160208701614cc9565b601f01601f191691909101608001949350505050565b634e487b7160e01b600052603260045260246000fd5b6020808252602f908201527f4974206973206e6f74207468652063757272656e7420706c617965722773207460408201526e3ab937103a379037b832b930ba329760891b606082015260800190565b6020808252601b908201527f47616d65206469646e2774207374617274206f7220656e6465642e0000000000604082015260600190565b602080825260159082015274506c61796572206d7573742062652061637469766560581b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115614e2257614e22614df9565b92915050565b80820180821115614e2257614e22614df9565b634e487b7160e01b600052601260045260246000fd5b600082614e6057614e60614e3b565b500690565b600060018201614e7757614e77614df9565b5060010190565b8082028115828204841417614e2257614e22614df9565b634e487b7160e01b600052604160045260246000fd5b60006040820184835260206040818501528185548084526060860191508660005282600020935060005b81811015614efa5784546001600160a01b031683526001948501949284019201614ed5565b5090979650505050505050565b60008251614f19818460208701614cc9565b9190910192915050565b85815284602082015260a060408201526000614f4260a0830186614bf3565b606083019490945250608001529392505050565b600081614f6557614f65614df9565b506000190190565b80516020808301519190811015614f8e576000198160200360031b1b821691505b50919050565b600082614fa357614fa3614e3b565b500490565b60008351614fba818460208801614cc9565b600160fd1b9083019081528351614fd8816001840160208801614cc9565b01600101949350505050565b6000815480845260208085019450836000528060002060005b83811015614b1957815487529582019560019182019101614ffd565b8281526060602082015260046060820152630464c4f560e41b608082015260a06040820152600061504d60a0830184614fe4565b949350505050565b8281526060602082015260046060820152632a2aa92760e11b608082015260a06040820152600061504d60a0830184614fe4565b8281526060602082015260056060820152642924ab22a960d91b608082015260a06040820152600061504d60a0830184614fe4565b82815260606020820152600660608201526508c929c92a6960d31b608082015260a06040820152600061504d60a0830184614fe4565b600060ff821660ff810361510a5761510a614df9565b60010192915050565b60ff8181168382160190811115614e2257614e22614df956fe8b849d0211ab3330b8439763ed49240657fc4bdd0877663a025ab34bd1ddeb99a2646970667358221220214dca8268557bed7bc4e9acb0417159241dec4682b5049cfc043642fb94b96d64736f6c63430008110033";

    public static final String FUNC_ADDCHIPS = "addChips";

    public static final String FUNC_CALL = "call";

    public static final String FUNC_CHECK = "check";

    public static final String FUNC_CREATETABLE = "createTable";

    public static final String FUNC_EXCHANGECHIPSFORBALANCE = "exchangeChipsForBalance";

    public static final String FUNC_FOLD = "fold";

    public static final String FUNC_GETNAMEBYCARDVALUE = "getNameByCardValue";

    public static final String FUNC_GETPLAYERINFO = "getPlayerInfo";

    public static final String FUNC_GETRAISEAMOUNT = "getRaiseAmount";

    public static final String FUNC_GETTABLEINFO = "getTableInfo";

    public static final String FUNC_JOINGAME = "joinGame";

    public static final String FUNC_JOINGAMEBYID = "joinGameById";

    public static final String FUNC_NUMTABLE = "numTable";

    public static final String FUNC_RAISE = "raise";

    public static final String FUNC_STARTROUND = "startRound";

    public static final String FUNC_TABLES = "tables";

    public static final Event CALL_EVENT = new Event("Call",
                                                     Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                     }, new TypeReference<Address>() {
                                                     }, new TypeReference<Uint256>() {
                                                     }));

    ;

    public static final Event CHECK_EVENT = new Event("Check",
                                                      Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                      }, new TypeReference<Address>() {
                                                      }));

    ;

    public static final Event CREATETABLE_EVENT = new Event("CreateTable",
                                                            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                            }, new TypeReference<Uint256>() {
                                                            }, new TypeReference<Uint256>() {
                                                            }, new TypeReference<Address>() {
                                                            }));

    ;

    public static final Event ENDROUND_EVENT = new Event("EndRound",
                                                         Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                         }, new TypeReference<Utf8String>() {
                                                         }, new TypeReference<DynamicArray<Uint256>>() {
                                                         }));

    ;

    public static final Event FOLD_EVENT = new Event("Fold",
                                                     Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                     }, new TypeReference<Address>() {
                                                     }));

    ;

    public static final Event GAMEOVER_EVENT = new Event("GameOver",
                                                         Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                         }));

    ;

    public static final Event JOINGAME_EVENT = new Event("JoinGame",
                                                         Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                         }, new TypeReference<Address>() {
                                                         }, new TypeReference<Uint256>() {
                                                         }));

    ;

    public static final Event RAISE_EVENT = new Event("Raise",
                                                      Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                      }, new TypeReference<Address>() {
                                                      }, new TypeReference<Uint256>() {
                                                      }, new TypeReference<Uint256>() {
                                                      }));

    ;

    public static final Event STARTROUND_EVENT = new Event("StartRound",
                                                           Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                           }, new TypeReference<DynamicArray<Address>>() {
                                                           }));

    ;

    public static final Event WINNER_EVENT = new Event("Winner",
                                                       Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                                       }, new TypeReference<Uint256>() {
                                                       }, new TypeReference<DynamicArray<Address>>() {
                                                       }, new TypeReference<Uint256>() {
                                                       }, new TypeReference<Uint256>() {
                                                       }));

    ;

    protected TexasHoldem(String contractAddress,
                          Web3j web3j,
                          Credentials credentials,
                          GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected TexasHoldem(String contractAddress,
                          Web3j web3j,
                          TransactionManager transactionManager,
                          GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<CallEventResponse> getCallEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CALL_EVENT, transactionReceipt);
        ArrayList<CallEventResponse> responses = new ArrayList<CallEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CallEventResponse typedResponse = new CallEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._bet = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.CALL_EVENT);
            typedResponse.name = TexasHoldem.CALL_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CallEventResponse> callEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, CallEventResponse>() {
            @Override
            public CallEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CALL_EVENT, log);
                CallEventResponse typedResponse = new CallEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._bet = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CallEventResponse> callEventObservable(DefaultBlockParameter startBlock,
                                                             DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CALL_EVENT));
        return callEventObservable(filter);
    }

    public List<CheckEventResponse> getCheckEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHECK_EVENT, transactionReceipt);
        ArrayList<CheckEventResponse> responses = new ArrayList<CheckEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CheckEventResponse typedResponse = new CheckEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.CHECK_EVENT);
            typedResponse.name = TexasHoldem.CHECK_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CheckEventResponse> checkEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, CheckEventResponse>() {
            @Override
            public CheckEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHECK_EVENT, log);
                CheckEventResponse typedResponse = new CheckEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CheckEventResponse> checkEventObservable(DefaultBlockParameter startBlock,
                                                               DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHECK_EVENT));
        return checkEventObservable(filter);
    }

    public List<CreateTableEventResponse> getCreateTableEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATETABLE_EVENT,
                                                                                    transactionReceipt);
        ArrayList<CreateTableEventResponse> responses = new ArrayList<CreateTableEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateTableEventResponse typedResponse = new CreateTableEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._smallBlind = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._bigBlind = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._tokenAddr = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.CREATETABLE_EVENT);
            typedResponse.name = TexasHoldem.CREATETABLE_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateTableEventResponse> createTableEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, CreateTableEventResponse>() {
            @Override
            public CreateTableEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATETABLE_EVENT, log);
                CreateTableEventResponse typedResponse = new CreateTableEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._smallBlind = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._bigBlind = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._tokenAddr = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<CreateTableEventResponse> createTableEventObservable(DefaultBlockParameter startBlock,
                                                                           DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATETABLE_EVENT));
        return createTableEventObservable(filter);
    }

    public List<EndRoundEventResponse> getEndRoundEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ENDROUND_EVENT, transactionReceipt);
        ArrayList<EndRoundEventResponse> responses = new ArrayList<EndRoundEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EndRoundEventResponse typedResponse = new EndRoundEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._round = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._board = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.ENDROUND_EVENT);
            typedResponse.name = TexasHoldem.ENDROUND_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<EndRoundEventResponse> endRoundEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, EndRoundEventResponse>() {
            @Override
            public EndRoundEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ENDROUND_EVENT, log);
                EndRoundEventResponse typedResponse = new EndRoundEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._round = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._board = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<EndRoundEventResponse> endRoundEventObservable(DefaultBlockParameter startBlock,
                                                                     DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENDROUND_EVENT));
        return endRoundEventObservable(filter);
    }

    public List<FoldEventResponse> getFoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FOLD_EVENT, transactionReceipt);
        ArrayList<FoldEventResponse> responses = new ArrayList<FoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FoldEventResponse typedResponse = new FoldEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.FOLD_EVENT);
            typedResponse.name = TexasHoldem.FOLD_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<FoldEventResponse> foldEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, FoldEventResponse>() {
            @Override
            public FoldEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FOLD_EVENT, log);
                FoldEventResponse typedResponse = new FoldEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<FoldEventResponse> foldEventObservable(DefaultBlockParameter startBlock,
                                                             DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FOLD_EVENT));
        return foldEventObservable(filter);
    }

    public List<GameOverEventResponse> getGameOverEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GAMEOVER_EVENT, transactionReceipt);
        ArrayList<GameOverEventResponse> responses = new ArrayList<GameOverEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GameOverEventResponse typedResponse = new GameOverEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.GAMEOVER_EVENT);
            typedResponse.name = TexasHoldem.GAMEOVER_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GameOverEventResponse> gameOverEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, GameOverEventResponse>() {
            @Override
            public GameOverEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GAMEOVER_EVENT, log);
                GameOverEventResponse typedResponse = new GameOverEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<GameOverEventResponse> gameOverEventObservable(DefaultBlockParameter startBlock,
                                                                     DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEOVER_EVENT));
        return gameOverEventObservable(filter);
    }

    public List<JoinGameEventResponse> getJoinGameEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(JOINGAME_EVENT, transactionReceipt);
        ArrayList<JoinGameEventResponse> responses = new ArrayList<JoinGameEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            JoinGameEventResponse typedResponse = new JoinGameEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.JOINGAME_EVENT);
            typedResponse.name = TexasHoldem.JOINGAME_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<JoinGameEventResponse> joinGameEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, JoinGameEventResponse>() {
            @Override
            public JoinGameEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(JOINGAME_EVENT, log);
                JoinGameEventResponse typedResponse = new JoinGameEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<JoinGameEventResponse> joinGameEventObservable(DefaultBlockParameter startBlock,
                                                                     DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(JOINGAME_EVENT));
        return joinGameEventObservable(filter);
    }

    public List<RaiseEventResponse> getRaiseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RAISE_EVENT, transactionReceipt);
        ArrayList<RaiseEventResponse> responses = new ArrayList<RaiseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RaiseEventResponse typedResponse = new RaiseEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._raise = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._highestBet = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.RAISE_EVENT);
            typedResponse.name = TexasHoldem.RAISE_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RaiseEventResponse> raiseEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, RaiseEventResponse>() {
            @Override
            public RaiseEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RAISE_EVENT, log);
                RaiseEventResponse typedResponse = new RaiseEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._player = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._raise = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._highestBet = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<RaiseEventResponse> raiseEventObservable(DefaultBlockParameter startBlock,
                                                               DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RAISE_EVENT));
        return raiseEventObservable(filter);
    }

    public List<StartRoundEventResponse> getStartRoundEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(STARTROUND_EVENT,
                                                                                    transactionReceipt);
        ArrayList<StartRoundEventResponse> responses = new ArrayList<StartRoundEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            StartRoundEventResponse typedResponse = new StartRoundEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._playerAddrList = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.STARTROUND_EVENT);
            typedResponse.name = TexasHoldem.STARTROUND_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StartRoundEventResponse> startRoundEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, StartRoundEventResponse>() {
            @Override
            public StartRoundEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(STARTROUND_EVENT, log);
                StartRoundEventResponse typedResponse = new StartRoundEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._playerAddrList = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<StartRoundEventResponse> startRoundEventObservable(DefaultBlockParameter startBlock,
                                                                         DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STARTROUND_EVENT));
        return startRoundEventObservable(filter);
    }

    public List<WinnerEventResponse> getWinnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WINNER_EVENT, transactionReceipt);
        ArrayList<WinnerEventResponse> responses = new ArrayList<WinnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WinnerEventResponse typedResponse = new WinnerEventResponse();
            typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._numWinners = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._winnerList = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._handRank = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._revenuePerWinner = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.topics = EventEncoder.encode(TexasHoldem.WINNER_EVENT);
            typedResponse.name = TexasHoldem.WINNER_EVENT.getName();
            typedResponse.contract = eventValues.getLog().getAddress();
            typedResponse.data = eventValues.getLog().getData();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WinnerEventResponse> winnerEventObservable(BubbleFilter filter) {
        return web3j.bubbleLogObservable(filter).map(new Func1<Log, WinnerEventResponse>() {
            @Override
            public WinnerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WINNER_EVENT, log);
                WinnerEventResponse typedResponse = new WinnerEventResponse();
                typedResponse._tableId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._numWinners = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._winnerList = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._handRank = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._revenuePerWinner = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<WinnerEventResponse> winnerEventObservable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        BubbleFilter filter = new BubbleFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WINNER_EVENT));
        return winnerEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> addChips(BigInteger tableId, BigInteger chips) {
        final Function function = new Function(FUNC_ADDCHIPS,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           tableId),
                                                                   new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           chips)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> call(BigInteger tableId, String player) {
        final Function function = new Function(FUNC_CALL,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId), new com.bubble.abi.solidity.datatypes.Address(player)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> check(BigInteger tableId, String player) {
        final Function function = new Function(FUNC_CHECK,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId), new com.bubble.abi.solidity.datatypes.Address(player)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTable(BigInteger _smallBlind, BigInteger _bigBlind, String _tokenAddr) {
        final Function function = new Function(FUNC_CREATETABLE,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           _smallBlind),
                                                                   new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           _bigBlind),
                                                                   new com.bubble.abi.solidity.datatypes.Address(
                                                                           _tokenAddr)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> exchangeChipsForBalance(BigInteger tableId, BigInteger amount) {
        final Function function = new Function(FUNC_EXCHANGECHIPSFORBALANCE,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           tableId),
                                                                   new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           amount)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> fold(BigInteger tableId, String player) {
        final Function function = new Function(FUNC_FOLD,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId), new com.bubble.abi.solidity.datatypes.Address(player)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, String>> getNameByCardValue(BigInteger card) {
        final Function function = new Function(FUNC_GETNAMEBYCARDVALUE,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       card)),
                                               Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Utf8String>() {
                                               }));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, String>>(new Callable<Tuple3<BigInteger, BigInteger, String>>() {
            @Override
            public Tuple3<BigInteger, BigInteger, String> call() throws Exception {
                List<Type> results = executeCallMultipleValueReturn(function);
                return new Tuple3<BigInteger, BigInteger, String>((BigInteger) results.get(0).getValue(),
                                                                  (BigInteger) results.get(1).getValue(),
                                                                  (String) results.get(2).getValue());
            }
        });
    }

    public RemoteCall<Tuple6<BigInteger, BigInteger, List<BigInteger>, BigInteger, Boolean, List<BigInteger>>> getPlayerInfo(
            BigInteger tableId,
            String player) {
        final Function function = new Function(FUNC_GETPLAYERINFO,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId), new com.bubble.abi.solidity.datatypes.Address(player)),
                                               Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<DynamicArray<Uint256>>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Bool>() {
                                               }, new TypeReference<DynamicArray<Uint256>>() {
                                               }));
        return new RemoteCall<Tuple6<BigInteger, BigInteger, List<BigInteger>, BigInteger, Boolean, List<BigInteger>>>(
                new Callable<Tuple6<BigInteger, BigInteger, List<BigInteger>, BigInteger, Boolean, List<BigInteger>>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, List<BigInteger>, BigInteger, Boolean, List<BigInteger>> call() throws
                                                                                                                          Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, List<BigInteger>, BigInteger, Boolean, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                convertToNative((List<Uint256>) results.get(2).getValue()),
                                (BigInteger) results.get(3).getValue(),
                                (Boolean) results.get(4).getValue(),
                                convertToNative((List<Uint256>) results.get(5).getValue()));
                    }
                });
    }

    public RemoteCall<BigInteger> getRaiseAmount(BigInteger tableId, String player) {
        final Function function = new Function(FUNC_GETRAISEAMOUNT,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId), new com.bubble.abi.solidity.datatypes.Address(player)),
                                               Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                               }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, List<BigInteger>, List<String>>> getTableInfo(
            BigInteger tableId) {
        final Function function = new Function(FUNC_GETTABLEINFO,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId)),
                                               Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Address>() {
                                               }, new TypeReference<DynamicArray<Uint256>>() {
                                               }, new TypeReference<DynamicArray<Address>>() {
                                               }));
        return new RemoteCall<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, List<BigInteger>, List<String>>>(
                new Callable<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, List<BigInteger>, List<String>>>() {
                    @Override
                    public Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, List<BigInteger>, List<String>> call() throws
                                                                                                                                                                                  Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, List<BigInteger>, List<String>>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (String) results.get(8).getValue(),
                                convertToNative((List<Uint256>) results.get(9).getValue()),
                                convertToNative((List<Address>) results.get(10).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> joinGame(BigInteger chips) {
        final Function function = new Function(FUNC_JOINGAME,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       chips)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> joinGameById(BigInteger tableId, BigInteger chips) {
        final Function function = new Function(FUNC_JOINGAMEBYID,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           tableId),
                                                                   new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           chips)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> numTable() {
        final Function function = new Function(FUNC_NUMTABLE,
                                               Arrays.<Type>asList(),
                                               Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                               }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> raise(BigInteger tableId, String player, BigInteger amount) {
        final Function function = new Function(FUNC_RAISE,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           tableId),
                                                                   new com.bubble.abi.solidity.datatypes.Address(player),
                                                                   new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                                           amount)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startRound(BigInteger tableId) {
        final Function function = new Function(FUNC_STARTROUND,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       tableId)),
                                               Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> tables(
            BigInteger param0) {
        final Function function = new Function(FUNC_TABLES,
                                               Arrays.<Type>asList(new com.bubble.abi.solidity.datatypes.generated.Uint256(
                                                       param0)),
                                               Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Uint256>() {
                                               }, new TypeReference<Address>() {
                                               }));
        return new RemoteCall<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(
                new Callable<Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call() throws
                                                                                                                                                              Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (String) results.get(9).getValue());
                    }
                });
    }

    public static RemoteCall<TexasHoldem> deploy(Web3j web3j,
                                                 Credentials credentials,
                                                 GasProvider contractGasProvider) {
        return deployRemoteCall(TexasHoldem.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TexasHoldem> deploy(Web3j web3j,
                                                 TransactionManager transactionManager,
                                                 GasProvider contractGasProvider) {
        return deployRemoteCall(TexasHoldem.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    public static TexasHoldem load(String contractAddress,
                                   Web3j web3j,
                                   Credentials credentials,
                                   GasProvider contractGasProvider) {
        return new TexasHoldem(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TexasHoldem load(String contractAddress,
                                   Web3j web3j,
                                   TransactionManager transactionManager,
                                   GasProvider contractGasProvider) {
        return new TexasHoldem(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class CallEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public String _player;

        public BigInteger _bet;

    }

    public static class CheckEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public String _player;

    }

    public static class CreateTableEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public BigInteger _smallBlind;

        public BigInteger _bigBlind;

        public String _tokenAddr;

    }

    public static class EndRoundEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public String _round;

        public List<BigInteger> _board;

    }

    public static class FoldEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public String _player;

    }

    public static class GameOverEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

    }

    public static class JoinGameEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public String _player;

        public BigInteger _amount;

    }

    public static class RaiseEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public String _player;

        public BigInteger _raise;

        public BigInteger _highestBet;

    }

    public static class StartRoundEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public List<String> _playerAddrList;

    }

    public static class WinnerEventResponse {

        public String topics;

        public String name;

        public String contract;

        public String data;

        public BigInteger _tableId;

        public BigInteger _numWinners;

        public List<String> _winnerList;

        public BigInteger _handRank;

        public BigInteger _revenuePerWinner;

    }

}
